{
    "version": "https://jsonfeed.org/version/1",
    "title": "沨临",
    "subtitle": "记录回忆，分享经验，慢慢进步",
    "icon": "https://windlinxy.top/images/favicon.ico",
    "description": "后端 CS 技术博客",
    "home_page_url": "https://windlinxy.top",
    "items": [
        {
            "id": "https://windlinxy.top/2023/09/12/324da08a924e/",
            "url": "https://windlinxy.top/2023/09/12/324da08a924e/",
            "title": "ADB总结",
            "date_published": "2023-09-12T15:31:47.000Z",
            "content_html": "<h1 id=\"adb\"><a class=\"anchor\" href=\"#adb\">#</a> adb</h1>\n<blockquote>\n<p>ADB 是 Android Debug Bridge 的缩写，是一种用于在 Android 设备和计算机之间进行通信的命令行工具。ADB 可以用于调试和测试 Android 应用程序，以及在 Android 设备上执行各种操作，如安装和卸载应用程序、复制文件、查看设备日志等。</p>\n</blockquote>\n<h2 id=\"将adb变成全局可用命令\"><a class=\"anchor\" href=\"#将adb变成全局可用命令\">#</a> 将 adb 变成全局可用命令：</h2>\n<ol>\n<li>配置环境变量： <code>sudo gedit ~/.zshrc</code>  （注意，是使用的是哪个 shell 就编辑哪个 shell resource 文件）</li>\n<li>添加参数变量：\n<ol>\n<li>\n<pre><code class=\"language-Bash\">#Android SDK\nexport SDK_PATH=/home/Android/Sdk\nexport PATH=/home/Android/Sdk/platform-tools:$&#123;PATH&#125;\n</code></pre>\n</li>\n</ol>\n</li>\n<li>生效配置： <code>source ~/.zshrc</code></li>\n</ol>\n<p>另一种方法 ： 进入目录 /usr/local/bin/ ： <code>sudo ln -s /home/Android/Sdk/platform-tools/adb</code></p>\n<p>* <code>ln</code> *<em> 命令：link files，为某一个文件在另外一个位置建立一个同步的链接。</em></p>\n<h2 id=\"adb常用命令\"><a class=\"anchor\" href=\"#adb常用命令\">#</a> adb 常用命令：</h2>\n<ul>\n<li>查看连接设备： <code>adb devices</code></li>\n<li>启用交互模式： <code>adb shell</code></li>\n<li>获得系统权限： <code>adb root</code></li>\n<li>将 '/system' 部分置于可写入的模式，默认情况下 '/system' 部分是只读模式的： <code>adb remount</code></li>\n<li>文件\n<ul>\n<li>设备文件复制到本机；</li>\n<li>本机复制到设备：</li>\n</ul>\n</li>\n<li>bugreport 保存位置 (不指定默认是保存在手机本地目录)： <code>adb bugreport /home/xxx</code></li>\n<li>屏幕截图\n<ul>\n<li><code>adb exec-out screencap -p &gt; /home/xxx/xx.png</code></li>\n<li><code>adb shell screencap -p &gt; /home/xxx/xx.png</code></li>\n</ul>\n</li>\n<li>获取当前活动的类名和包名\n<ul>\n<li><code>adb shell dumpsys window | grep mCurrentFocus</code></li>\n</ul>\n</li>\n</ul>\n<p>使用 sqlite 遇到的问题解决： /system 目录为只读，需要  adb remount 来开写权限</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 启动交互式 shell</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>adb shell</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 获取系统权限</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>adb root</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 将 '/system' 部分置于可写入的模式，默认情况下 '/system' 部分是只读模式的。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>adb remount</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 从设备中复制某个文件或目录（及其子目录）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>adb pull remote <span class=\"token builtin class-name\">local</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 将本地文件复制到设备</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>adb push <span class=\"token builtin class-name\">local</span> remote</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 截图</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>adb shell screencap -p <span class=\"token operator\">></span> /home/基础模式.png</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 安装 apk </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>adb <span class=\"token function\">install</span> -r 安装包路径</pre></td></tr></table></figure><h2 id=\"工作用到的\"><a class=\"anchor\" href=\"#工作用到的\">#</a> 工作用到的</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>adb root</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>adb devices</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>adb kill-server</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>adb start-server</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>adb devices -l <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> offline <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print $1&#125;'</span> <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> -n1 adb -s <span class=\"token function\">rm</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>adb devices -l <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> offline <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> -n1 adb -s <span class=\"token function\">rm</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>adb -s <span class=\"token function\">rm</span> emu</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>adb -s emulator-5556 emu <span class=\"token function\">kill</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>adb -s emulator-5556 emu <span class=\"token function\">kill</span> -9</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>adb -s emulator-5556 emu <span class=\"token function\">kill</span> emulator-5556</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>adb shell</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>adb push /usr/bin/sqlite3 /system/xbin</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>adb shell <span class=\"token function\">chmod</span> <span class=\"token number\">4755</span> /system/xbin/sqlite3</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>adb push /bin/sqlite3 /system/xbin</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>adb disable-verity</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>adb <span class=\"token function\">reboot</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>adb remount</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>adb sell pm list packages</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>adb shell pm list packages</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>adb shell pm list packages -s</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>adb logcat <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -i <span class=\"token string\">\"XXX\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>adb get-serialno</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>adb shell getprop ro.product.model</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>adb shell wm density</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>adb shell dumpsys -h</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>adb <span class=\"token function\">su</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>adb <span class=\"token function\">reboot</span> bootloader</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>adb sevices</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>adb devicecs</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>adb shell <span class=\"token function\">mount</span> -o rw,remount /system</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>adb push charles.0 /system/etc/security/cacerts</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>adb push 386e7bc3.0 /system/etc/security/cacerts</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>adb shell <span class=\"token function\">ls</span> /system/etc/security/cacerts</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>adb shell </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>adb <span class=\"token function\">reboot</span> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>adb shelljmount -0 rw,remount /system</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>adb shell p, list packages -3</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>adb shell pm list packages -3</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>adb shell pm uninstall --user <span class=\"token number\">0</span> com.android.browser</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>adb bugreport <span class=\"token number\">1447</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>adb bugreport bugreport</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>adb bugreport bugreport-2</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>adb <span class=\"token function\">install</span> -r jiameng.apk</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>adb shell dumpsys window <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> mCurrentFocus</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>adb <span class=\"token function\">install</span> -r ./app/build/outputs/apk/debug/app-debug.apk<span class=\"token punctuation\">\\</span>n</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>adb uninstall -d com.tenxx.xcx</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>adb <span class=\"token function\">install</span> -t ./toStartOf.apk</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>adb push ~/文档/386e7bc3.0 /system/etc/security/cacerts</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>adb shell am start -a android.intent.action.VIEW -d <span class=\"token string\">'scheme://details?id=com.tencent.mm\\n\\n\\n'</span></pre></td></tr></table></figure>",
            "tags": [
                "学习笔记",
                "Android"
            ]
        },
        {
            "id": "https://windlinxy.top/2023/08/17/625794741ec0/",
            "url": "https://windlinxy.top/2023/08/17/625794741ec0/",
            "title": "Git常用",
            "date_published": "2023-08-17T14:55:09.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dlZWVlZWVlZWVrL2dpdC1yZWNpcGVzL3RyZWUvbWFzdGVyL3NvdXJjZXM=\">Git 指南</span></p>\n<h2 id=\"工作常用\"><a class=\"anchor\" href=\"#工作常用\">#</a> 工作常用</h2>\n<h3 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 配置帐户</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> config --global user.name xxx</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> config --global user.email yyy</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># check 配置是否正确</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> config --global --list</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 把 git 的默认编辑器换成 im</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">git</span> config --global core.editor <span class=\"token function\">vim</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 为 Git 命令创建一个快捷方式（别名）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">git</span> config --global alias.<span class=\"token operator\">&lt;</span>alias-name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>git-command<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 定义当前机器所有用户使用命令时用到的文本编辑器，如 git commit。&lt;editor> 参数用编辑器的启动命令（如 vi）替代。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">git</span> config --system core.editor <span class=\"token operator\">&lt;</span>editor<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 用文本编辑器打开全局配置文件，手动编辑</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">git</span> config --global --edit</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 在指定目录下创建一个裸仓库</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">git</span> init --bare <span class=\"token operator\">&lt;</span>directory<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"查看\"><a class=\"anchor\" href=\"#查看\">#</a> 查看</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看当前 git 状态</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> status</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 查看某次提交的内容</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> show 提交记录id</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 比较暂存区域中的文件和最新提交的文件之间的差异</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">diff</span> --staged</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 比较两个提交之间的差异。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">diff</span> <span class=\"token operator\">&lt;</span>commit<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>commit<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 比较两个分支之间的差异。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">diff</span> <span class=\"token operator\">&lt;</span>branch<span class=\"token operator\">></span><span class=\"token punctuation\">..</span><span class=\"token operator\">&lt;</span>branch<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 查看远程分支</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">git</span> branch -r</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">git</span> checkout XXX</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin <span class=\"token operator\">&lt;</span>server<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"还原\"><a class=\"anchor\" href=\"#还原\">#</a> 还原</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 还原工作区的文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> restore filename</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 还原暂存区中的文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> restore --staged filename</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 从指定的提交中还原文件：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> restore --source<span class=\"token operator\">=</span>HEAD-1 filename</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 还原整个目录</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">git</span> restore dir/</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 回溯版本 - 回溯版本后的版本可能会丢失</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">git</span> reset --hard df66027f00c<span class=\"token punctuation\">(</span>版本号<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"分支\"><a class=\"anchor\" href=\"#分支\">#</a> 分支</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 列出本地分支；-r 远程分支 ；-a 全部分支（本地 + 远程）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> branch</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 创建新分支；-d 删除分支</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> branch branch-name</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> branch -d branch-name</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># -D 命令用于强制删除指定的本地分支，即使该分支包含未合并的提交。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">git</span> branch -D branch-name</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 切换分支；-b 创建并切换新的分支</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">git</span> checkout branch-name</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">git</span> checkout -b branch-name</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 指定分支合并到当前分支</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">git</span> merge branch-name</pre></td></tr></table></figure><h3 id=\"提交\"><a class=\"anchor\" href=\"#提交\">#</a> 提交</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 将文件从工作区添加到暂存区，以便将其包含在下一次提交中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 提交带有签名的提交</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> commit -s</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 追加提交，将 add 的内容追加到最近一次提交</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> commit --amend</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># --no-edit 选项表示不打开编辑器，直接使用原来的提交信息。这个选项通常用于只修改文件内容而不修改提交信息的情况。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">git</span> commit --amend --no-edit</pre></td></tr></table></figure><h3 id=\"暂存\"><a class=\"anchor\" href=\"#暂存\">#</a> 暂存</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 将修改暂存，需要先 add</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> stash</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> stash list</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> stash <span class=\"token function\">clear</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> stash apply</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 拿出第一个暂存的修改</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">git</span> stash pop</pre></td></tr></table></figure><h3 id=\"远程相关\"><a class=\"anchor\" href=\"#远程相关\">#</a> 远程相关</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 工作常用，用于拉取远程代码并且将自己的修改置于 head</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> pull --rebase</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 从远程仓库获取最新的代码，并且删除本地已经不存在的远程分支。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> fetch -p</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 提交远程</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">git</span> push origin branch-name</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">git</span> push ssh://账号@项目路径  HEAD:分支</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 将指定的提交 (可多个提交) 应用到当前分支中。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">git</span> cherry-pick <span class=\"token operator\">&lt;</span>commit<span class=\"token operator\">></span><span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 继续之前被中断的 cherry-pick 操作（一般是冲突了之后会中断，手动解决后使用）</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">git</span> cherry-pick --continue</pre></td></tr></table></figure><p><code>--rebase</code>  是将远程代码拉取到本地，并且将自己的修改放置在最前面。 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNjE4MTc3NDMzNjEzP3NlYXJjaElkPTIwMjMwODE1MTU0MDM1REM2MEU5NUU2MkRBQkVBNkQxREY=\">pull 对比 pull --rebase</span></p>\n<h2 id=\"原理相关\"><a class=\"anchor\" href=\"#原理相关\">#</a> 原理相关</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/202308172300393.png\" alt=\"img\" /><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/202308172300839.png\" alt=\"img\" /><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/202308172300497.png\" alt=\"img\" /></p>\n<h2 id=\"文件的状态\"><a class=\"anchor\" href=\"#文件的状态\">#</a> 文件的状态：</h2>\n<ul>\n<li>untracked 未跟踪</li>\n<li>unmodified 未修改</li>\n<li>modified 已修改</li>\n<li>staged 已暂存</li>\n<li>committed 已提交</li>\n</ul>\n<h2 id=\"git提交规范\"><a class=\"anchor\" href=\"#git提交规范\">#</a> Git 提交规范</h2>\n<ul>\n<li>feat：新功能</li>\n<li>fix：修补 bug</li>\n<li>docs：文档</li>\n<li>style ： 格式</li>\n<li>refactor：重构</li>\n<li>test：增加测试</li>\n<li>chore：构建过程或辅助工具的变动</li>\n</ul>\n<h1 id=\"gerrit\"><a class=\"anchor\" href=\"#gerrit\">#</a> Gerrit</h1>\n<p>使用 commit --amend 追加前面提交的时候，gerrit 通过 changeId 来判断，从而使得 push 的时候可以追加到之前的提交，只是在远程加了 patchsetN</p>\n",
            "tags": [
                "学习笔记",
                "工具",
                "后端",
                "Git"
            ]
        },
        {
            "id": "https://windlinxy.top/2023/06/27/3f6a96d10637/",
            "url": "https://windlinxy.top/2023/06/27/3f6a96d10637/",
            "title": "读《redis设计与实现》",
            "date_published": "2023-06-27T01:13:03.000Z",
            "content_html": "<h1 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h1>\n<p>《redis 设计与实现》是基于 2.9 版本写作的，现在（2023.06.27）redis 已经更新到 7.0.11 版本了，虽然书中有些介绍已经过时，但是还是可以对 redis 建立起大致的认知的。</p>\n<h1 id=\"一-数据结构与对象\"><a class=\"anchor\" href=\"#一-数据结构与对象\">#</a> 一、数据结构与对象</h1>\n<p>redis 有五种基本类型：String、List、Hash、Set、ZSet，目前 7 版本还有五种特殊类型：HyperLogLog、Geospatial、Stream、Bitmaps、Bitfields。</p>\n<h2 id=\"数据结构\"><a class=\"anchor\" href=\"#数据结构\">#</a> 数据结构</h2>\n<p>五种常用的基本类型，底层使用的数据结构有：SDS（Simple Dynamic String）、list、hashtable、zipList、intset、skiplist。</p>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> TB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>String <span class=\"token arrow operator\">==></span> SDS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>List <span class=\"token arrow operator\">==></span> list</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>List <span class=\"token arrow operator\">==></span> ziplist</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Hash <span class=\"token arrow operator\">==></span> ziplist</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Hash <span class=\"token arrow operator\">==></span> hashtable</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Set\t<span class=\"token arrow operator\">==></span> hashtable</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Set <span class=\"token arrow operator\">==></span> intset</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Zset <span class=\"token arrow operator\">==></span> ziplist</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Zset <span class=\"token arrow operator\">==></span> skiplist</pre></td></tr></table></figure><p>在 redis3.2 版本之后 List 底层数据采用快表（quicklist）实现。</p>\n<h3 id=\"sds\"><a class=\"anchor\" href=\"#sds\">#</a> SDS</h3>\n<p>简单动态字符串，其（3.2 版本之前）结构是：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sdshdr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//buf 中已经使用的长度</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> free<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//buf 中未使用的长度</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 柔性数组 buf</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>SDS 与 C 字符串区别：</p>\n<ul>\n<li>与 C 字符串不同，使用额外两个变量记录长度，可以使得我们可以 O (1) 时间复杂度级别获取字符串长度。</li>\n<li>二进制安全：C 字符串只能使用 ASCII 编码，可能因为二进制文件中可能包含空字符 '\\0'，导致 C 字符串误以为终止符，而 sds 使用 len 属性判定终止，不会与文件内容冲突。</li>\n<li>杜绝缓存区溢出：C 字符串中，如果出现两个字符串在内存中相邻，修改前字符串 1（长度变长）而不分配空间，就会导致字符串 2 内容被修改。SDS 在修改字符串会先判断给定空间是否足够，足够就直接修改，不够就会先分配空间再去修改。</li>\n<li>减少字符串修改带来的内存重分配次数：C 字符串并不记录自身长度，每次修改都需要进行内存重分配：增长字符串不进行内存重分配 — 缓冲区溢出，缩小字符串长度不进行内存重分配 — 内存泄露。Redis 作为数据库，如果每次修改都去做内存中分配，就会对性能造成影响，所以 redis 采用空间预分配以及惰性空间释放策略。</li>\n</ul>\n<h4 id=\"空间预分配\"><a class=\"anchor\" href=\"#空间预分配\">#</a> 空间预分配</h4>\n<p>在 SDS 增长字符串长度时，如果发现原本的空间不足以修改，需要内存重分配，除了为 SDS 分配修改所必需的空间，还会分配额外的空间：</p>\n<ul>\n<li>如果 SDS 修改之后长度小于 1MB，程序会分配和 len 属性同样大小的未使用空间，此时 SDS 的值等于 free 的值</li>\n<li>如果 SDS 修改之后长度大于等于 1MB，会分配 1MB 的未使用空间</li>\n</ul>\n<p><strong>执行过 APPEND 命令的字符串会带有额外的预分配空间，这些预分配空间不会被释放，除非该字符串所对应的键被删除，或者等到关闭 Redis 之后，再次启动时重新载入的字符串对象将不会有预分配空间。</strong></p>\n<h3 id=\"链表list\"><a class=\"anchor\" href=\"#链表list\">#</a> 链表 list</h3>\n<p>作为 List 类型的底层实现，3.2 之后就废用了，使用快表代替。</p>\n<pre><code class=\"language-C\">typedef struct listNode&#123;\n    struct listNode *prev;\n    struct listNode *next;\n    void *value;\n&#125;\n</code></pre>\n<p>双端链表</p>\n<pre><code class=\"language-C\">typedef struct list&#123;\n\tstruct listNode *head;\n    struct listNode *tail;\n    unsigned long len;\n\n&#125;\n</code></pre>\n<h3 id=\"压缩列表ziplist\"><a class=\"anchor\" href=\"#压缩列表ziplist\">#</a> 压缩列表 ziplist</h3>\n<p>压缩列表是列表（3.2 版本之前）和 Hash 表底层实现。</p>\n<p>大致结构：</p>\n<table>\n<thead>\n<tr>\n<th>zlbytes</th>\n<th>ztail</th>\n<th>zllen</th>\n<th>entry1</th>\n<th>...</th>\n<th>entryX</th>\n<th>zlend</th>\n</tr>\n</thead>\n</table>\n<ul>\n<li>zlbytes：压缩列表总字节数</li>\n<li>ztail：尾部偏移量</li>\n<li>zllen：节点数量</li>\n<li>entryX：节点</li>\n</ul>\n<p>entry 结构：</p>\n<table>\n<thead>\n<tr>\n<th>previous_entry_length</th>\n<th>encoding</th>\n<th>content</th>\n</tr>\n</thead>\n</table>\n<ul>\n<li>previous_entry_length： 前一个节点的长度</li>\n<li>encoding：值的编码</li>\n<li>content：存储内容（指针指向）</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* ziplist header 的大小：两个 32 位整数，用于总字节计数 (bytes) 和最后一项偏移量 (ZIPLIST_TAIL_OFFSET)。一个 16 位整数，节点数 (ZIPLIST_LENGTH (zl))。*/</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ZIPLIST_HEADER_SIZE</span>     <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/* ziplist 结尾标识，1 字节. */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ZIPLIST_END_SIZE</span>        <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint8_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* 创建一个新的压缩列表 . */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">ziplistNew</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> bytes <span class=\"token operator\">=</span> ZIPLIST_HEADER_SIZE <span class=\"token operator\">+</span> ZIPLIST_END_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>zl <span class=\"token operator\">=</span> <span class=\"token function\">zmalloc</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 压缩列表总字节长度</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">ZIPLIST_BYTES</span><span class=\"token punctuation\">(</span>zl<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">intrev32ifbe</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 尾节点的偏移量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">ZIPLIST_TAIL_OFFSET</span><span class=\"token punctuation\">(</span>zl<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">intrev32ifbe</span><span class=\"token punctuation\">(</span>ZIPLIST_HEADER_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 节点个数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">ZIPLIST_LENGTH</span><span class=\"token punctuation\">(</span>zl<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 特殊结尾值</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    zl<span class=\"token punctuation\">[</span>bytes<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ZIP_END<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> zl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 压缩列表节点</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">zlentry</span> <span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> prevrawlensize <span class=\"token comment\">//prevrawlen 的大小，有 1 字节和 5 字节两种</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> prevrawlen<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//prevrawlen 是前一个节点的长度</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> lensize<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//  lensize 为编码 len 所需的字节大小</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> len \t\t\t<span class=\"token comment\">//len 为当前节点长度</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> headersize<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 当前节点的 header 大小</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> encoding<span class=\"token punctuation\">;</span> \t<span class=\"token comment\">// 节点的编码方式</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>   \t\t<span class=\"token comment\">// 指向节点的指针</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span> zlentry<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"快表quicklist\"><a class=\"anchor\" href=\"#快表quicklist\">#</a> 快表 quicklist</h3>\n<p>3.2 版本之后作为 List 类型的底层实现，是双端链表和压缩列表的结合，使用压缩列表作为双端链表的节点</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">quicklistNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">quicklistNode</span> <span class=\"token operator\">*</span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">quicklistNode</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>entry<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 指向压缩列表 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">size_t</span> sz<span class=\"token punctuation\">;</span>             <span class=\"token comment\">/* ziplist 字节数 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* ziplist 节点数量 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> encoding <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* 编码 RAW=1，LZF=2 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> container <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* 容器，NONE=1，ziplist=2 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> recompress <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/*  节点是否已被压缩 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> attempted_compress <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/*  测试使用，在压缩时，设为 1，解压时设为 0 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> dont_compress <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 防止压缩稍后将使用的节点 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> extra <span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 留用字段 */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span> quicklistNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 存储 LZF 压缩后的数据，对于 quicklistNode 来说：</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 如果数据未被压缩，数据直接存储在 node->zl 中</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 如果数据被压缩，则 node->zl 存储一个 quicklistLZF，压缩后的数据存在 quicklistLZF 中</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">quicklistLZF</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">;</span> <span class=\"token comment\">//compressed 的大小</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">char</span> compressed<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// LZF 压缩后的数据</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span> quicklistLZF<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 书签 </span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">quicklistBookmark</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    quicklistNode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 书签标记的节点</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 书签名</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span> quicklistBookmark<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 快表定义，size: 40 bytes</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">quicklist</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    quicklistNode <span class=\"token operator\">*</span>head<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 头节点</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    quicklistNode <span class=\"token operator\">*</span>tail<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 尾节点</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> count<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 元素的数量</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> len<span class=\"token punctuation\">;</span> <span class=\"token comment\">//quicklistNode 的数量</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">int</span> fill <span class=\"token operator\">:</span> QL_FILL_BITS<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* QL_FILL_BITS=16 单个节点的填充系数</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        如果为负数则使用的为默认值，参考 optimization_level*/</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> compress <span class=\"token operator\">:</span> QL_COMP_BITS<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* QL_COMP_BITS=16，</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        压缩深度，对整个列表压缩时，只压缩头尾往中各 compress 个节点，如果为 0 则表示不压缩 */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> bookmark_count <span class=\"token operator\">:</span> QL_BM_BITS<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* QL_BM_BITS=4，</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        书签的数量；默认只给了 4 位，空了 4 位没有使用，使用过多的书签会导致性能下降 */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    quicklistBookmark bookmarks<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前使用的书签</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span> quicklist<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 快表条目</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">quicklistEntry</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">const</span> quicklist <span class=\"token operator\">*</span>quicklist<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 条目所属快表</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    quicklistNode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 条目所属节点</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>zi<span class=\"token punctuation\">;</span> <span class=\"token comment\">//ziplist item 指针</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 条目的字符串值起始指针</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> longval<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 条目的整数值</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 条目的大小</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 条目在节点中的偏移量（位置）</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span> quicklistEntry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>快表源码解释原文链接：https<span class=\"token operator\">:</span><span class=\"token comment\">//blog.csdn.net/weixin_44016271/article/details/110286635</span></pre></td></tr></table></figure><h3 id=\"字典哈希表dict\"><a class=\"anchor\" href=\"#字典哈希表dict\">#</a> 字典 / 哈希表 dict</h3>\n<p>字典是 Set 和 Hash 的底层数据结构。以下是 7 版本的源码。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">dict</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    dictType <span class=\"token operator\">*</span>type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 哈希表数组，有两个用于 rehash</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    dictEntry <span class=\"token operator\">*</span><span class=\"token operator\">*</span>ht_table<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 两张哈希表中，分别使用了多少</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> ht_used<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">long</span> rehashidx<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 记录 rehash 进度的标志，-1 表示 rehash 未进行 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/* Keep small vars at end for optimal (minimal) struct padding */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//pauserehash 为 6 后新加入的特性，为保证效率新增 rehash 的 paused 的操作。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">int16_t</span> pauserehash<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* If >0 rehashing is paused (&lt;0 indicates coding error) */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">signed</span> <span class=\"token keyword\">char</span> ht_size_exp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* hash 表的长度，2 的 n 次方 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>metadata<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">/* An arbitrary number of bytes (starting at a</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                                 * pointer-aligned address) of size as defined</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                                 * by dictType's dictEntryBytes. */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>* dictType 中是一个存放函数的结构体，定义了一些函数指针。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">dictType</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">uint64_t</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>hashFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 哈希函数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>keyDup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dict <span class=\"token operator\">*</span>d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 复制 key</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>valDup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dict <span class=\"token operator\">*</span>d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 复制 val</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>keyCompare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dict <span class=\"token operator\">*</span>d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 比较 key</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>keyDestructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dict <span class=\"token operator\">*</span>d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 删除 key</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>valDestructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dict <span class=\"token operator\">*</span>d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 删除 val</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>expandAllowed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> moreMem<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> usedRatio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/* Allow a dictEntry to carry extra caller-defined metadata.  The</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * extra memory is initialized to 0 when a dictEntry is allocated. */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token class-name\">size_t</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>dictEntryMetadataBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dict <span class=\"token operator\">*</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span> dictType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">dictEntry</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">;</span><span class=\"token comment\">// 键</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">uint64_t</span> u64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">int64_t</span> s64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">double</span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> v<span class=\"token punctuation\">;</span><span class=\"token comment\">// 值</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">dictEntry</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* Next entry in the same hash bucket. */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>metadata<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">/* An arbitrary number of bytes (starting at a</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                                 * pointer-aligned address) of size as returned</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                                 * by dictType's dictEntryMetadataBytes(). */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span> dictEntry<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在书中有提到 dict 是这样的：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">dict</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    dictType <span class=\"token operator\">*</span>type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>privdata<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    dictht ht<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> trehashidx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> dict<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">dictht</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    dictEntry <span class=\"token operator\">*</span><span class=\"token operator\">*</span>table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    dictType <span class=\"token operator\">*</span>type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> sizemask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> used<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但是在 7 版本并未使用，而是直接使用 <code>dictEntry **ht_table[2];</code>  等属性来构造字典</p>\n<h4 id=\"rehash\"><a class=\"anchor\" href=\"#rehash\">#</a> rehash</h4>\n<ul>\n<li>当负载因子<strong>小于</strong> 0.1 时，进行收缩操作。</li>\n<li>当未执行 BGSAVE/BGREWRITEAOF 命令时，负载因子<strong>大于等于</strong> 1 时，进行扩展操作。</li>\n<li>当在执行 BGSAVE/BGREWRITEAOF 命令时，负载因子<strong>大于等于</strong> 5 时，进行扩展操作。</li>\n</ul>\n<p>当执行 BGSAVE/BGREWRITEAOF 时提高扩展所需负载因子，主要是因为执行这两个命令时都需要 redis 创建子进程，而此时进行 rehash 操作可能会触发子进程的 &quot;写时复制&quot; 机制。所以此时减少 rehash 操作即可避免不必要的内存写入操作，最大限度的节约内存。</p>\n<p>rehash 步骤：</p>\n<ol>\n<li>为字典两个哈希表中下标为 1 的未使用的哈希表分配空间：\n<ul>\n<li>扩展操作：ht [1] 大小 = 大于等于 ht [0].used*2 的 2 的 n 次方。（15 扩展后 32）</li>\n<li>收缩操作：ht [1] 大小 = 大于等于 ht [0].used 的 2 的 n 次方。 （12 收缩后 16）</li>\n<li>注意是按照已使用也就是元素个数来 rehash，并不是按照 ht [0] 的空间大小来分。</li>\n</ul>\n</li>\n<li>将保存在 ht [0] 的所有键值对 rehash 到 ht [1] 中；</li>\n<li>迁移完成后 ht [0] 变为空表，释放 ht [0] 空间，将 ht [1] 设置成 ht [0]，并为 ht [1] 创建空白哈希表，为下一次 rehash 做准备。</li>\n</ol>\n<h4 id=\"渐进式rehash\"><a class=\"anchor\" href=\"#渐进式rehash\">#</a> 渐进式 rehash</h4>\n<p>为了防止在进行扩展 / 收缩的 rehash 时，由于数据过多造成服务器停止服务，采用了渐进式 rehash 思路。</p>\n<ol>\n<li>为 ht [1] 分配空间，此时字典同时持有两个哈希表；</li>\n<li>将 rehashidx 设置为 0，表示 rehash 开始；</li>\n<li>在 rehash 期间，每次对字典执行增删改查都会额外将 ht [0] 中 rehashidex 索引上的的键值对 rehash 到 ht [1] 中，然后对于 rehashidx++；</li>\n<li>所有键值对都被 rehash 到 ht [1] 上之后，rehashidx 置为 - 1，rehash 完成。</li>\n</ol>\n<h3 id=\"跳跃表skiplist\"><a class=\"anchor\" href=\"#跳跃表skiplist\">#</a> 跳跃表 skiplist</h3>\n<p>跳跃表是 ZSet 的底层数据结构，跳跃表的缺点就是需要的存储空间比较大，属于利用空间来换取时间的数据结构。redis 跳跃表并没有在单独的类（比如 skplist.c) 中定义，而是其定义在 server.h 中：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* ZSETs use a specialized version of Skiplists */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">zskiplistNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 持有数据，是 sds 类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    sds ele<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 结点之间凭借得分来判断先后顺序，跳跃表中的结点按结点的得分升序排列.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">double</span> score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 原版跳跃表中所没有的。该指针指向结点的前一个紧邻结点.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">zskiplistNode</span> <span class=\"token operator\">*</span>backward<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//level 数组用以记录所有结点 (除过头节点外)，每个结点中最多持有 32 个 zskiplistLevel 结构</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">zskiplistLevel</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 指向比自己得分高的某个结点 (不一定是紧邻的)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">zskiplistNode</span> <span class=\"token operator\">*</span>forward<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 表 forward 字段指向的结点，距离当前结点的距离. </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> span<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> level<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span> zskiplistNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">zskiplist</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">zskiplistNode</span> <span class=\"token operator\">*</span>header<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span> zskiplist<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">zset</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    dict <span class=\"token operator\">*</span>dict<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    zskiplist <span class=\"token operator\">*</span>zsl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span> zset<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>为什么不使用其他数据结构？</p>\n<ul>\n<li>skiplist 和各种平衡树（如 AVL、红黑树等）的元素是有序排列的，而哈希表不是有序的。因此，在哈希表上只能做单个 key 的查找，不适宜做范围查找。所谓范围查找，指的是查找那些大小在指定的两个值之间的所有节点。</li>\n<li></li>\n</ul>\n",
            "tags": [
                "后端"
            ]
        },
        {
            "id": "https://windlinxy.top/2023/03/24/89bec373c8e7/",
            "url": "https://windlinxy.top/2023/03/24/89bec373c8e7/",
            "title": "回文串相关-LeetCode刷题",
            "date_published": "2023-03-24T09:05:51.000Z",
            "content_html": "<h1 id=\"回文串\"><a class=\"anchor\" href=\"#回文串\">#</a> 回文串</h1>\n<p>回文的概念就是一个序列正着来倒着来是一样的，比如回文数字 <code>12321</code> ，回文字符串 <code>abbccdccbba</code> ，诸如此类。</p>\n<h2 id=\"判断是否是回文串\"><a class=\"anchor\" href=\"#判断是否是回文串\">#</a> 判断是否是回文串</h2>\n<p>一般就是两头对比</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 StringBuffer 反转后比较</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"题目\"><a class=\"anchor\" href=\"#题目\">#</a> 题目</h1>\n<h2 id=\"简单难度\"><a class=\"anchor\" href=\"#简单难度\">#</a> 简单难度</h2>\n<h3 id=\"验证回文串\"><a class=\"anchor\" href=\"#验证回文串\">#</a> 验证回文串</h3>\n<p>[125. 验证回文串][<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy92YWxpZC1wYWxpbmRyb21lLw==\">https://leetcode.cn/problems/valid-palindrome/</span>]</p>\n<blockquote>\n<p>如果在将所有大写字符转换为小写字符、并移除所有非字母数字字符之后，短语正着读和反着读都一样。则可以认为该短语是一个 <strong>回文串</strong> 。</p>\n<p>字母和数字都属于字母数字字符。</p>\n<p>给你一个字符串  <code>s</code> ，如果它是 <strong>回文串</strong> ，返回  <code>true</code>  ；否则，返回  <code>false</code>  。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 去除非字母数字的字符</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[^a-zA-Z0-9]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 全部转换为小写</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 字符串翻转比较</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"验证回文串-ii\"><a class=\"anchor\" href=\"#验证回文串-ii\">#</a> 验证回文串 II</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy92YWxpZC1wYWxpbmRyb21lLWlpLw==\">680. 验证回文串 II</span></p>\n<blockquote>\n<p>给你一个字符串  <code>s</code> ，<strong>最多</strong> 可以从中删除一个字符。</p>\n<p>请你判断  <code>s</code>  是否能成为回文字符串：如果能，返回  <code>true</code>  ；否则，返回  <code>false</code>  。</p>\n</blockquote>\n<p><strong>思路：</strong> <code>双指针</code></p>\n<ul>\n<li>考虑到只能删除一个，查找到第一对不相等的字符的时候会有两种情况。\n<ul>\n<li>删除左侧的字符，删除右侧的字符。</li>\n<li>所以会有两个分支判断</li>\n</ul>\n</li>\n<li>如果这个字符串符合题目的要求，那么删除后的字符串一定是回文的。</li>\n<li>当比较到第一对不相等的字符位置时，只需要考虑删除后的子串是否是回文的就行。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">validPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token function\">jud</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">jud</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">jud</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em>注意： <code>subString</code>  方法在取字符串时左闭右开， <code>[a,b)</code> </em></p>\n<h3 id=\"回文数\"><a class=\"anchor\" href=\"#回文数\">#</a> 回文数</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9wYWxpbmRyb21lLW51bWJlci8=\">9. 回文数</span></p>\n<blockquote>\n<p>给你一个整数  <code>x</code>  ，如果  <code>x</code>  是一个回文整数，返回  <code>true</code>  ；否则，返回  <code>false</code>  。</p>\n<p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>\n<ul>\n<li>例如， <code>121</code>  是回文，而  <code>123</code>  不是。</li>\n<li><code>-121</code>  ， 从右向左读，为  <code>121- </code> 。因此它不是一个回文数。</li>\n</ul>\n</blockquote>\n<p><strong>思路：</strong></p>\n<ul>\n<li>首先排除负数</li>\n<li>以若干连续 0 结尾的数也不是回文的</li>\n</ul>\n<h4 id=\"直接数转化字符串\"><a class=\"anchor\" href=\"#直接数转化字符串\">#</a> 直接数转化字符串</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 负数直接拜拜</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// return new StringBuffer(str).reverse().toString().equals(str);</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"使用数字解决可以使用折半思想\"><a class=\"anchor\" href=\"#使用数字解决可以使用折半思想\">#</a> 使用数字解决，可以使用折半思想</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 思考：这里大家可以思考一下，为什么末尾为 0 就可以直接返回 false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> revertedNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 翻转到一般就行</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> revertedNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            revertedNumber <span class=\"token operator\">=</span> revertedNumber <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> x <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            x <span class=\"token operator\">/=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 考虑数字的位数是奇数和偶数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> x <span class=\"token operator\">==</span> revertedNumber <span class=\"token operator\">||</span> x <span class=\"token operator\">==</span> revertedNumber <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"最长回文串-简单\"><a class=\"anchor\" href=\"#最长回文串-简单\">#</a> 最长回文串 - 简单</h3>\n<blockquote>\n<p>给一个包含大写字母和小写字母的字符串  <code>s</code>  ，返回 <em>这些字母构造成的 <strong>最长的回文串</strong></em> 。</p>\n<p>在构造过程中，请注意 <strong>区分大小写</strong> 。比如  <code>&quot;Aa&quot;</code>  不能当做一个回文字符串。</p>\n</blockquote>\n<p><strong>思路：</strong></p>\n<ul>\n<li>题目问的是这些字母拼成的字符串，只需要考虑各个字母的数量即可</li>\n<li>根据各个字母的数量的奇偶，有两种情况\n<ul>\n<li>回文串字符数量为奇数，用了一个奇数数量的字母</li>\n<li>回文串字符数量为偶数，所有字母的数量都为偶数</li>\n</ul>\n</li>\n<li>开一个数组存各个字符数量</li>\n<li>第一个奇数数量的字符可以全部加到回文串中</li>\n<li>之后的字符数量只能为偶数加入回文串</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">longestPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">60</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch <span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            count<span class=\"token punctuation\">[</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                res<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            res <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 Java 的流进行优化一下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">longestPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> count <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">boxed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">-></span> k<span class=\"token punctuation\">,</span> v <span class=\"token operator\">-></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> count<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mapToInt</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-></span> i <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> ans <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> ans <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"回文链表\"><a class=\"anchor\" href=\"#回文链表\">#</a> 回文链表</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9wYWxpbmRyb21lLWxpbmtlZC1saXN0Lw==\">234. 回文链表</span></p>\n<blockquote>\n<p>给你一个单链表的头节点  <code>head</code>  ，请你判断该链表是否为回文链表。如果是，返回  <code>true</code>  ；否则，返回  <code>false</code>  。</p>\n</blockquote>\n<p>折半思想，使用快慢指针找到中间节点，之后的链表翻转，最后比较就行</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for singly-linked list.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * public class ListNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     ListNode next;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     ListNode() &#123;&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     ListNode(int val) &#123; this.val = val; &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * &#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> mid <span class=\"token operator\">=</span> <span class=\"token function\">midNode</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> cmp <span class=\"token operator\">=</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> cmp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> cmp<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            cmp <span class=\"token operator\">=</span> cmp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">midNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> fast <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> fast<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            slow <span class=\"token operator\">=</span> slow<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            fast <span class=\"token operator\">=</span> fast<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> slow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> cur <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token class-name\">ListNode</span> next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            cur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"中等难度\"><a class=\"anchor\" href=\"#中等难度\">#</a> 中等难度</h2>\n<h3 id=\"最长回文子串\"><a class=\"anchor\" href=\"#最长回文子串\">#</a> 最长回文子串</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LXBhbGluZHJvbWljLXN1YnN0cmluZy8=\">5. 最长回文子串</span></p>\n<blockquote>\n<p>给你一个字符串  <code>s</code> ，找到  <code>s</code>  中最长的回文子串。</p>\n<p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p>\n</blockquote>\n<p><strong>暴力的话会超时，可以用中心扩散法或动态规划</strong></p>\n<h4 id=\"中心扩散法\"><a class=\"anchor\" href=\"#中心扩散法\">#</a> 中心扩散法</h4>\n<p><strong>思路：</strong></p>\n<ul>\n<li>遍历，选择一个元素 <code>i</code></li>\n<li>两个指针，从元素左 <code>left = i-1</code>  右 <code>right = i+1</code>  开始比较\n<ul>\n<li>如果左指针元素与 <code>i</code>  位置元素相等，左指针左移，否则不变</li>\n<li>右指针同理，右移</li>\n<li>之后比较两指针所指元素</li>\n<li>上述过程的好处是泛化了回文串的字符奇数偶数问题，使得该方法适用</li>\n</ul>\n</li>\n<li>每次选择中间元素 <code>i</code>  记录最大长度和起始位置即可。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">longestPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> strLen <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> maxStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> maxLen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> strLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        left <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        right <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        len <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            left<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> strLen <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            right<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">&lt;</span> strLen <span class=\"token operator\">&amp;&amp;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            len <span class=\"token operator\">=</span> len <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            left<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            right<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> maxLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            maxLen <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            maxStart <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>maxStart <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> maxStart <span class=\"token operator\">+</span> maxLen <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"动态规划\"><a class=\"anchor\" href=\"#动态规划\">#</a> 动态规划</h4>\n<p>适用动态规划，首先要想<strong>状态转移</strong>，对于回文串，我们可以认为回文串的状态转移是从头尾向中间走。</p>\n<ol>\n<li>\n<p>定义状态，使用 <code>dp[i][j]</code>  记录子串 <code>[i,j]</code>  是否回文</p>\n</li>\n<li>\n<p>状态转移方程：首先要 <code>s[i] == s[j]</code> ，其次是 <code>dp[i-1][j+1] == true</code></p>\n<p>注意 <code> i - 1 != j + 1</code> ，所以要求子串长度大于等于 2</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> and dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">longestPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> strLen <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> maxStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 最长回文串的起点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> maxLen <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 最长回文串的长度</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>strLen<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>strLen<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> r <span class=\"token operator\">&lt;</span> strLen<span class=\"token punctuation\">;</span> r<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">;</span> l<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">-</span> l <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> dp<span class=\"token punctuation\">[</span>l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>r <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                dp<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">-</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">></span> maxLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    maxLen <span class=\"token operator\">=</span> r <span class=\"token operator\">-</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    maxStart <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>maxStart<span class=\"token punctuation\">,</span> maxStart <span class=\"token operator\">+</span> maxLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "LeetCode刷题",
                "LeetCode",
                "中心扩散法",
                "回文"
            ]
        },
        {
            "id": "https://windlinxy.top/2023/03/22/82bee2525fb1/",
            "url": "https://windlinxy.top/2023/03/22/82bee2525fb1/",
            "title": "缺失的第一个正数-LeetCode刷题",
            "date_published": "2023-03-22T09:05:51.000Z",
            "content_html": "<h2 id=\"缺失的第一个正数\"><a class=\"anchor\" href=\"#缺失的第一个正数\">#</a> 缺失的第一个正数</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9maXJzdC1taXNzaW5nLXBvc2l0aXZlLw==\">41. 缺失的第一个正数</span></p>\n<blockquote>\n<p>给你一个未排序的整数数组  <code>nums</code>  ，请你找出其中没有出现的最小的正整数。</p>\n<p>请你实现时间复杂度为  <code>O(n)</code>  并且只使用常数级别额外空间的解决方案。</p>\n</blockquote>\n<h3 id=\"排序\"><a class=\"anchor\" href=\"#排序\">#</a> 排序</h3>\n<p>如果不考虑时间问题，只考虑空间问题，这题很好做，将数组排序，用一个 <code>count</code>  记一下最小正数就行</p>\n<ul>\n<li>count 初始为 1</li>\n<li>对于排序后的数组，遍历，元素记 <code>item</code></li>\n<li><code>item == count</code> ， <code>count</code>  自增</li>\n<li><code>item &gt; count</code>  返回</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">firstMissingPositive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> item <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">==</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"打表\"><a class=\"anchor\" href=\"#打表\">#</a> 打表</h3>\n<p>如果不考虑空间问题，只考虑时间问题，需要用到桶</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">firstMissingPositive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> res<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> i<span class=\"token operator\">&lt;=</span>len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 如果循环没返回说明正好数组中的数是 1~n</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"原地哈希\"><a class=\"anchor\" href=\"#原地哈希\">#</a> 原地哈希</h3>\n<p>时间复杂度为  <code>O(n)</code>  并且只使用常数级别额外空间的解决方案就是操作原数组，原地哈希。</p>\n<p>对于原数组，将其变为一个  <code>nums[i-1] = i</code>  的形式。</p>\n<p>例子：</p>\n<ul>\n<li>长度为 4 的数组 {4,2,1,3}，原地哈希后 {1,2,3,4}，每个元素满足 <code>nums[i-1] = i</code> 。</li>\n<li>数组 {4, -1, 1, 3}，原地哈希后 {1, -1, 3, 4}，此时遍历找到第一个满足 <code>nums[i-1] != i</code>  的元素返回对应缺失的正数即可。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">firstMissingPositive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token comment\">// 符合 hash 的条件跳过</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token comment\">// 交换后需要再次判断 nums [nums [i]-1]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">^=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "LeetCode刷题",
                "LeetCode",
                "原地哈希"
            ]
        },
        {
            "id": "https://windlinxy.top/2023/03/05/cfe6cb0e3385/",
            "url": "https://windlinxy.top/2023/03/05/cfe6cb0e3385/",
            "title": "LeetCode刷题-LRU",
            "date_published": "2023-03-05T09:05:51.000Z",
            "content_html": "<h2 id=\"lru缓存\"><a class=\"anchor\" href=\"#lru缓存\">#</a> LRU 缓存</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9scnUtY2FjaGUv\">146.LRU 缓存</span></p>\n<blockquote>\n<p>请你设计并实现一个满足 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9MUlU=\">LRU (最近最少使用) 缓存</span> 约束的数据结构。</p>\n<p>实现  <code>LRUCache</code>  类：</p>\n<ul>\n<li><code>LRUCache(int capacity)</code>  以 <strong>正整数</strong> 作为容量  <code>capacity</code>  初始化 LRU 缓存</li>\n<li><code>int get(int key)</code>  如果关键字  <code>key</code>  存在于缓存中，则返回关键字的值，否则返回  <code>-1</code>  。</li>\n<li><code>void put(int key, int value)</code>  如果关键字  <code>key</code>  已经存在，则变更其数据值  <code>value</code>  ；如果不存在，则向缓存中插入该组  <code>key-value</code>  。如果插入操作导致关键字数量超过  <code>capacity</code>  ，则应该 <strong>逐出</strong> 最久未使用的关键字。</li>\n</ul>\n<p>函数  <code>get</code>  和  <code>put</code>  必须以  <code>O(1)</code>  的平均时间复杂度运行。</p>\n</blockquote>\n<p>一开始想到是使用<strong>双向链表</strong>，但是双向链表的查询是 O (n) 的，O (1) 的查询自然就是<strong>哈希表</strong>了</p>\n<p><code>PUT操作</code> ：</p>\n<p>添加元素时判断 key 是否存在（HashMap 查找）</p>\n<ul>\n<li>\n<p>存在</p>\n<ol>\n<li>重新赋值</li>\n<li>将节点从原有位置抽离</li>\n<li>节点放到链表头部</li>\n</ol>\n</li>\n<li>\n<p>不存在</p>\n<ol>\n<li>\n<p>判断容量已经满了 ？（用 <code>count</code>  变量记录 cache 中元素数量）</p>\n<ul>\n<li>\n<p>没满：新建一个节点 <code>newNode</code>  插入链表头部</p>\n</li>\n<li>\n<p>满了：</p>\n<ol>\n<li>将尾部节点删除</li>\n<li>新建节点 <code>newNode</code>  插入头部</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>HashMap 存放 &lt; key,  <code>newNode</code> &gt;</p>\n</li>\n</ol>\n</li>\n</ul>\n<p><code>GET操作</code> ：</p>\n<ol>\n<li>从 HashMap 取节点\n<ul>\n<li>为 <code>null</code>  返回 - 1</li>\n<li>不为 <code>null</code>\n<ol>\n<li>将节点从原有位置抽离</li>\n<li>节点放到链表头部</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<p>AC 之后考虑并发问题，LRU 本身就是操作系统的内存淘汰机制，需要考虑并发问题：如果 get 的同时</p>\n<p>在多线程的情况下， <code>get()</code>  移动节点操作和 <code>put()</code>  整个方法加锁来保证节点的顺序正常。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LRUCache</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 容量</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * head.next 指向的是最近最多使用的节点</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * tail.prev 指向的是最近最少使用的节点</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> hash<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Node</span> next<span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span> prev<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LRUCache</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hash <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        tail <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        tail<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">// 查找节点</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">Node</span> nNode <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token function\">unLinkedNode</span><span class=\"token punctuation\">(</span>nNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token function\">moveToHead</span><span class=\"token punctuation\">(</span>nNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">return</span> nNode<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token class-name\">Node</span> nNode <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nNode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                hash<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token function\">removeTail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            nNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            hash<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> nNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            nNode<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token function\">unLinkedNode</span><span class=\"token punctuation\">(</span>nNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token function\">moveToHead</span><span class=\"token punctuation\">(</span>nNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>     * 将节点放到链表头部</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveToHead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> cur<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        cur<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    * 将节点从原有链表拿出来</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unLinkedNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> cur<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        cur<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>     * 淘汰最近最少使用的节点（尾节点）</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">removeTail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token function\">unLinkedNode</span><span class=\"token punctuation\">(</span>tail<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"104\"></td><td><pre> * Your LRUCache object will be instantiated and called as such:</pre></td></tr><tr><td data-num=\"105\"></td><td><pre> * LRUCache obj = new LRUCache(capacity);</pre></td></tr><tr><td data-num=\"106\"></td><td><pre> * int param_1 = obj.get(key);</pre></td></tr><tr><td data-num=\"107\"></td><td><pre> * obj.put(key,value);</pre></td></tr><tr><td data-num=\"108\"></td><td><pre> */</span></pre></td></tr></table></figure><h2 id=\"引申\"><a class=\"anchor\" href=\"#引申\">#</a> 引申</h2>\n<p>LRU 全程<em> Least Recently Used</em>，即最近最少使用的页面置换算法，是服务虚拟页式存储管理服务的，实现思想是读取的数据会更新到 LRU 列表最前端， 当容量满的时候会淘汰尾部数据，来达到一个最近最少使用的数据淘汰功能。</p>\n<p>根据<strong>局部性原理</strong>（包括空间局部性和时间局部性，一条指令执行后在将来的一段时间内可能会再次执行（热点代码），一个数据被访问后可能会再次访问，或者这个数据相邻的数据很大概率会再次访问到）。</p>\n<p>CSAPP 关于局部性的论述：</p>\n<ul>\n<li><em>在一个具有良好时间局部性的程序中，被引用过的内存位置很可能在不远的将来再被多次引用。</em></li>\n<li><em>在一个具有良好空间局部性的程序中，一个内存位置被引用了一次，那么程序很可能在不远的将来引用附近的一个内存位置。</em></li>\n</ul>\n<p>个人思考：局部性原理是无处不在的，LRU 就是基于局部性原理的一个体现。</p>\n",
            "tags": [
                "LeetCode刷题",
                "LeetCode",
                "LRU缓存机制"
            ]
        },
        {
            "id": "https://windlinxy.top/2023/03/03/d91775c4b914/",
            "url": "https://windlinxy.top/2023/03/03/d91775c4b914/",
            "title": "3月2日LeetCode刷题",
            "date_published": "2023-03-03T09:05:51.000Z",
            "content_html": "<h2 id=\"跳跃游戏\"><a class=\"anchor\" href=\"#跳跃游戏\">#</a> 跳跃游戏</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9qdW1wLWdhbWUvZGVzY3JpcHRpb24v\">55. 跳跃游戏</span></p>\n<blockquote>\n<p>给定一个非负整数数组  <code>nums</code></p>\n<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>\n<p>判断你是否能够到达最后一个下标。</p>\n<p>示例：</p>\n<p>输入：nums = [2,3,1,1,4]<br />\n 输出：true<br />\n 解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。</p>\n<p>输入：nums = [3,2,1,0,4]<br />\n 输出：false<br />\n 解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。</p>\n</blockquote>\n<p><mark>贪心</mark>思路：找到一个下标，这个下标刚好可以到达最后下一个下标。</p>\n<ul>\n<li>从下标  <code> i</code>  出发可达区间  <code>(i, i + nums[i] ]</code> ， 当然， <code>i &lt; nums.length</code> 。</li>\n<li>前 <code>n</code>  个下标会有一个最大可达下标 <code>max = max(max, i + nums[i])）</code> 。</li>\n<li>当 <code>max &gt;= nums.length - 1</code>  时，这个数组的最后一个下标是可达的。</li>\n<li>下标 <code>i</code>  不会超过最大可达下标： <code>i &lt;= max</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canJump</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">&amp;&amp;</span> i<span class=\"token operator\">&lt;=</span>max<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>max <span class=\"token operator\">>=</span> len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"最长有效括号\"><a class=\"anchor\" href=\"#最长有效括号\">#</a> 最长有效括号</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LXZhbGlkLXBhcmVudGhlc2VzL2Rlc2NyaXB0aW9uLw==\">32. 最长有效括号</span></p>\n<blockquote>\n<p>给你一个只包含  <code>'('</code>  和  <code>')'</code>  的字符串，找出最长有效（格式正确且连续）括号子串的长度。</p>\n<p>输入：s = &quot;)()())&quot;<br />\n 输出：4<br />\n 解释：最长有效括号子串是 &quot;()()&quot;</p>\n</blockquote>\n<p><strong>动态规划 + 双指针</strong></p>\n<ul>\n<li><code>max</code>  记录最长括号子串括号数。</li>\n<li><code>left</code>  和 <code> right</code>  在遍历时记录左括号和右括号数。</li>\n<li>当 <code>right == left</code>  时说明括号匹配，记录 <code>max = Math.max(right,max)</code> 。</li>\n<li><code>right &gt; left</code>  说明子串中有括号匹配不了， <code>left</code>  和 <code>right</code>  置 0。</li>\n</ul>\n<p>这时候就有一个问题：以上操作只能判断 <code>)</code>  无法匹配的情况，如何解决 <code>(</code> 无法匹配的情况？</p>\n<p>可以反转字符串重复以上步骤</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">longestValidParentheses</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span> c <span class=\"token operator\">:</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> c <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            right<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">,</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">></span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            right <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    right <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 翻转字符串再次操作</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span> c <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> c <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            right<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 反转后需要判断 left > right </span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">></span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            right <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span> max <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"最长公共前缀\"><a class=\"anchor\" href=\"#最长公共前缀\">#</a> 最长公共前缀</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LWNvbW1vbi1wcmVmaXgvZGVzY3JpcHRpb24v\">14. 最长公共前缀</span></p>\n<blockquote>\n<p>编写一个函数来查找字符串数组中的最长公共前缀。</p>\n<p>如果不存在公共前缀，返回空字符串  <code>&quot;&quot;</code> 。</p>\n<p>输入：strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]<br />\n 输出：&quot;fl&quot;</p>\n</blockquote>\n<p>边界条件太多，要判断。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">longestCommonPrefix</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 长度为 0 直接返回</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 包含一个 “ ” 直接返回</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> strs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> strs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">String</span> base <span class=\"token operator\">=</span> strs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> base<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str <span class=\"token operator\">:</span> strs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 有一个 \" \" 字符串或者两字符串第一个字母不相同直接返回</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> base<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> base<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        res <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> base<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"两数组交集\"><a class=\"anchor\" href=\"#两数组交集\">#</a> 两数组交集</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9pbnRlcnNlY3Rpb24tb2YtdHdvLWFycmF5cy9kZXNjcmlwdGlvbi8=\">349. 两个数组的交集</span></p>\n<blockquote>\n<p>给定两个数组  <code>nums1</code>  和  <code>nums2</code>  ，返回 <em>它们的交集</em> 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。</p>\n</blockquote>\n<p>直接用 HashSet 解决</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">intersection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> set1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> set2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> nums1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        set1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> nums2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            set2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>set2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> set2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        res<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span>  res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "LeetCode刷题",
                "LeetCode",
                "跳跃游戏",
                "最长有效括号",
                "两数组交集",
                "最长公共前缀",
                "贪心"
            ]
        },
        {
            "id": "https://windlinxy.top/2023/03/02/e88df4d29e80/",
            "url": "https://windlinxy.top/2023/03/02/e88df4d29e80/",
            "title": "3月2日LeetCode刷题",
            "date_published": "2023-03-02T02:05:51.000Z",
            "content_html": "<h2 id=\"相交链表\"><a class=\"anchor\" href=\"#相交链表\">#</a> 相交链表</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9pbnRlcnNlY3Rpb24tb2YtdHdvLWxpbmtlZC1saXN0cy8=\">LeetCode：160. 相交链表</span></p>\n<blockquote>\n<p>给你两个单链表的头节点  <code>headA</code>  和  <code>headB</code>  ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回  <code>null</code>  。</p>\n<p>图示两个链表在节点  <code>c1</code>  开始相交 **：**</p>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/202303021100493.png\" alt=\"image-20230302110002342\" /></p>\n<p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p>\n<p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* Definition for singly-linked list.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 定义数据结构</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token class-name\">ListNode</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         val <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>一开始我想到的是判重，可以用哈希表（Map 或者 Set）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用 HashMap 以 cur.next 节点为 key，cur 为 value 来找</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">getIntersectionNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> headA<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> headB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>headA <span class=\"token operator\">==</span> headB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> headA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> curA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> curB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        curA<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        curB<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>curA<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> curB<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curA<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>curA<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token keyword\">return</span> curA<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>curA<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> curA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                curA <span class=\"token operator\">=</span> curA<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curB<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>curB<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token keyword\">return</span> curB<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>curB<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> curB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                curB <span class=\"token operator\">=</span> curB<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 用 HashSet 直接找</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">getIntersectionNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> headA<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> headB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>headA <span class=\"token operator\">==</span> headB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> headA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>headA <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> headB <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>headA <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>headA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    <span class=\"token keyword\">return</span> headA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>headA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                headA <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>headB <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>headB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token keyword\">return</span> headB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>headB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                headB <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可能条件有些冗余，但是可以在两个链表遍历完前找到相交节点。</p>\n<p>看完题解后，时间复杂度<strong> O (m+n)</strong>，空间 **O (1)** 的解法是：两链表相交后长度是一样的，那么我们不考虑相交后的节点，相交前两链表的节点数是不一样多的，这时候如果指针 headA 遍历完 A 链表去遍历 B 链表，同时 headB 遍历完 B 链表去遍历 A 链表，那么这两个指针在第二次到达相交节点时会相遇，即可得到第一个相交节点。</p>\n<ul>\n<li>pA 指针遍历 A 链表，pB 指针遍历 B 链表</li>\n<li>两指针同时遍历下一个</li>\n<li>当 pA 到达 A 链表尾部，开始从头遍历 B 链表，当 pB 到达 B 链表尾部，开始从头遍历 B 链表</li>\n<li>pA 与 pB 相遇，得到相交节点</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">getIntersectionNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> headA<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> headB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>headA <span class=\"token operator\">==</span> headB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">return</span> headA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> pA <span class=\"token operator\">=</span> headA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> pB <span class=\"token operator\">=</span> headB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pA <span class=\"token operator\">!=</span> pB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            pA <span class=\"token operator\">=</span> pA <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token operator\">?</span> headB <span class=\"token operator\">:</span> pA<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            pB <span class=\"token operator\">=</span> pB <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token operator\">?</span> headA <span class=\"token operator\">:</span> pB<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> pA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"字符串相加\"><a class=\"anchor\" href=\"#字符串相加\">#</a> 字符串相加</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9hZGQtc3RyaW5ncy9kZXNjcmlwdGlvbi8=\">LeetCode 415. 字符串相加</span></p>\n<ul>\n<li>使用 StringBuilder 进行字符串拼接</li>\n<li>双指针从最后一个数开始计算</li>\n<li>count 记录进位</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">addStrings</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> num1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> len1 <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> len2 <span class=\"token operator\">=</span> num2<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>len1 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> len2 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> len1 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> num1<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>len1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> len2 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> num2<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>len2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            count <span class=\"token operator\">=</span> sum<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            len1<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            len2<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            res<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"二分查找\"><a class=\"anchor\" href=\"#二分查找\">#</a> 二分查找</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9iaW5hcnktc2VhcmNoL2Rlc2NyaXB0aW9uLw==\">704. 二分查找</span></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "LeetCode刷题",
                "LeetCode",
                "链表",
                "二分查找",
                "字符串相加"
            ]
        },
        {
            "id": "https://windlinxy.top/2023/03/01/fa472e2adb8b/",
            "url": "https://windlinxy.top/2023/03/01/fa472e2adb8b/",
            "title": "一些模板代码",
            "date_published": "2023-03-01T02:41:04.000Z",
            "content_html": "<h2 id=\"统一返回响应体封装\"><a class=\"anchor\" href=\"#统一返回响应体封装\">#</a> 统一返回响应体封装</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * 错误码</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 提示信息</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 返回的具体内容</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"操作失败\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1001</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"操作成功\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2001</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"操作成功\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">jud</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> condition <span class=\"token operator\">?</span> <span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">returnMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token class-name\">PrintWriter</span> out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token class-name\">String</span> jsonString<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        out <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        jsonString <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"jwt配置\"><a class=\"anchor\" href=\"#jwt配置\">#</a> JWT 配置</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--jwt 依赖 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.jsonwebtoken<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jjwt<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.9.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"jwtConfig\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"jwt\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JwtConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 密钥</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> secret <span class=\"token operator\">=</span> <span class=\"token string\">\"XXXXX\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 过期时间（单位：秒）-- 1 小时</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     **/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> expireTime <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> claim <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        claim<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        claim<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userId\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getUserId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Jwts</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setClaims</span><span class=\"token punctuation\">(</span>claim<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setIssuedAt</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setExpiration</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> expireTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">signWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SignatureAlgorithm</span><span class=\"token punctuation\">.</span>HS512<span class=\"token punctuation\">,</span> secret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * 获取 token 中注册信息</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Claims</span> <span class=\"token function\">getTokenClaim</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Jwts</span><span class=\"token punctuation\">.</span><span class=\"token function\">parser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSigningKey</span><span class=\"token punctuation\">(</span>secret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseClaimsJws</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">/*  catch (ExpiredJwtException e)&#123;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    return e.getClaims (); // 防止 jwt 过期解析报错</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                &#125;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     * 验证 token 是否过期失效</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     * @param token 令牌</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isTokenExpired</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">Date</span> expiration <span class=\"token operator\">=</span> <span class=\"token function\">getExpirationDateFromToken</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expiration <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">getExpirationDateFromToken</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>     * 获取 token 失效时间</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>     * @param token 令牌</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">getExpirationDateFromToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token class-name\">Claims</span> claims <span class=\"token operator\">=</span> <span class=\"token function\">getTokenClaim</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>claims <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> claims<span class=\"token punctuation\">.</span><span class=\"token function\">getExpiration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>     * 获取用户名从 token 中</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token class-name\">Claims</span> map <span class=\"token operator\">=</span> <span class=\"token function\">getTokenClaim</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token class-name\">Integer</span> userId <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>     * 获取 jwt 发布时间</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">getIssuedAtDateFromToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">getTokenClaim</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getIssuedAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>还有一个版本</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * JWT 工具类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JwtUtil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 有效期为 60 * 60 * 1000  一个小时</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Long</span> JWT_TTL <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 设置秘钥明文</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> JWT_KEY <span class=\"token operator\">=</span> <span class=\"token string\">\"XXXXXX\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * 生成 jtw</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * @param subject token 中要存放的数据（json 格式）</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">createJWT</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> subject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 设置过期时间</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">JwtBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token function\">getJwtBuilder</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * 生成 jtw</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * @param subject   token 中要存放的数据（json 格式）</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * @param ttlMillis token 超时时间</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">createJWT</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> subject<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> ttlMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 设置过期时间</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">JwtBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token function\">getJwtBuilder</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">,</span> ttlMillis<span class=\"token punctuation\">,</span> <span class=\"token function\">getUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     * 创建 token</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     * @param id</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     * @param subject</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     * @param ttlMillis</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">createJWT</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> subject<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> ttlMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token class-name\">JwtBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token function\">getJwtBuilder</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">,</span> ttlMillis<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置过期时间</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">return</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">JwtBuilder</span> <span class=\"token function\">getJwtBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> subject<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> ttlMillis<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> uuid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token class-name\">SecretKey</span> secretKey <span class=\"token operator\">=</span> <span class=\"token function\">generalKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">long</span> nowMillis <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token class-name\">Date</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>nowMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ttlMillis <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            ttlMillis <span class=\"token operator\">=</span> <span class=\"token class-name\">JwtUtil</span><span class=\"token punctuation\">.</span>JWT_TTL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">long</span> expMillis <span class=\"token operator\">=</span> nowMillis <span class=\"token operator\">+</span> ttlMillis<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token class-name\">Date</span> expDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>expMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Jwts</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token comment\">//jti:jwt 的唯一身份标识，主要用来作为一次性 token, 从而回避重放攻击。</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>uuid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token comment\">//sub: jwt 所面向的用户</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setSubject</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token comment\">//iss: 签发者</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setIssuer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"windlinxy.top\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token comment\">//iat: jwt 的签发时间</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setIssuedAt</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token comment\">//exp: jwt 的过期时间</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setExpiration</span><span class=\"token punctuation\">(</span>expDate<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                <span class=\"token comment\">// 使用 HS256 对称加密算法签名，第二个参数为秘钥</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">signWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SignatureAlgorithm</span><span class=\"token punctuation\">.</span>HS256<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">long</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> <span class=\"token function\">createJWT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nihao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token class-name\">Claims</span> claims <span class=\"token operator\">=</span> <span class=\"token function\">parseJWT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>     * 生成加密后的秘钥 secretKey</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SecretKey</span> <span class=\"token function\">generalKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> encodedKey <span class=\"token operator\">=</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JwtUtil</span><span class=\"token punctuation\">.</span>JWT_KEY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token class-name\">SecretKey</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SecretKeySpec</span><span class=\"token punctuation\">(</span>encodedKey<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> encodedKey<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token string\">\"AES\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">return</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>     * 解析</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>     * @param jwt</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>     * @throws Exception</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Claims</span> <span class=\"token function\">parseJWT</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> jwt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>jwt <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token class-name\">SecretKey</span> secretKey <span class=\"token operator\">=</span> <span class=\"token function\">generalKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Jwts</span><span class=\"token punctuation\">.</span><span class=\"token function\">parser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setSigningKey</span><span class=\"token punctuation\">(</span>secretKey<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">parseClaimsJws</span><span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"cors跨域解决\"><a class=\"anchor\" href=\"#cors跨域解决\">#</a> CORS 跨域解决</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebAppConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addCorsMappings</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CorsRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token comment\">// 是否发送 Cookie</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">allowCredentials</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token comment\">// 放行哪些原始域</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">allowedOriginPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">allowedMethods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">allowedHeaders</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">exposedHeaders</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"拦截器注解拦截\"><a class=\"anchor\" href=\"#拦截器注解拦截\">#</a> 拦截器（注解拦截）</h2>\n<p><code>@PassToken</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author Windlinxy</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @description: 权限判断跳过</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @create 2023-01-30 19:11</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">PassToken</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">required</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>拦截器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"AdminInterceptor\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AdminInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerInterceptor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">JwtConfig</span> jwtConfig<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        * 放行预检请求</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">String</span> options <span class=\"token operator\">=</span> <span class=\"token string\">\"OPTIONS\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">judAdminCheck</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">JsonResult</span><span class=\"token punctuation\">.</span><span class=\"token function\">returnMsg</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> <span class=\"token string\">\"需要管理员权限\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * 检查是否有 AdminCheck 注解，有则验证是否是管理员</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * @param handler handler</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * @return 是否有 PassToken 注释</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">judAdminCheck</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">AdminCheck</span> adminCheck <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HandlerMethod</span><span class=\"token punctuation\">)</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethodAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AdminCheck</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>adminCheck <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            adminCheck <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HandlerMethod</span><span class=\"token punctuation\">)</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AdminCheck</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> jwtConfig<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">return</span> adminCheck<span class=\"token punctuation\">.</span><span class=\"token function\">required</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"redisconfig\"><a class=\"anchor\" href=\"#redisconfig\">#</a> RedisConfig</h2>\n<p>使用原生的 <code>RedisTemplate</code>  时存储数据时键值对会带上编码前缀，解决办法是使用 FastJson 实现一个 redis 序列化器</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--redis 依赖 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.lettuce<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lettuce-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>redis.clients<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jedis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">&lt;!--fastjson 依赖 --></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>fastjson<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.2.33<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FastJsonRedisSerializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RedisSerializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Charset</span> DEFAULT_CHARSET <span class=\"token operator\">=</span> <span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> clazz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">ParserConfig</span><span class=\"token punctuation\">.</span><span class=\"token function\">getGlobalInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAutoTypeSupport</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FastJsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> clazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clazz <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SerializationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SerializerFeature<span class=\"token punctuation\">.</span>WriteClassName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span>DEFAULT_CHARSET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SerializationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bytes <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> bytes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> DEFAULT_CHARSET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">JavaType</span> <span class=\"token function\">getJavaType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> clazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">TypeFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">defaultInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">constructType</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>配置 <code>RedisTemplate</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rawtypes\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> connectionFactory<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>connectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">FastJsonRedisSerializer</span> serializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FastJsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 使用 StringRedisSerializer 来序列化和反序列化 redis 的 key 值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setValueSerializer</span><span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// Hash 的 key 也采用 StringRedisSerializer 的序列化方式</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setHashKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setHashValueSerializer</span><span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"redis工具类\"><a class=\"anchor\" href=\"#redis工具类\">#</a> redis 工具类</h2>\n<p><em>参考三更草堂 SpringSecurity 课程</em></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rawtypes\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"unused\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"all\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisCache</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span> redisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 缓存基本的对象，Integer、String、实体类等</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * @param key   缓存的键值</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @param value 缓存的值</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCacheObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * 缓存基本的对象，Integer、String、实体类等</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * @param key      缓存的键值</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * @param value    缓存的值</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * @param timeout  时间</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * @param timeUnit 时间颗粒度</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCacheObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">TimeUnit</span> timeUnit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">,</span> timeUnit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * 设置有效时间</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * @param key     Redis 键</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * @param timeout 超时时间</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * @return true = 设置成功；false = 设置失败</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">expire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">expire</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     * 设置有效时间</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>     * @param key     Redis 键</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     * @param timeout 超时时间</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     * @param unit    时间单位</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     * @return true = 设置成功；false = 设置失败</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">expire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">expire</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>     * 获得缓存的基本对象。</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>     * @param key 缓存键值</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>     * @return 缓存键值对应的数据</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getCacheObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token class-name\">ValueOperations</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> operation <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">return</span> operation<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>     * 删除单个对象</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>     * @param key</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">deleteObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>     * 删除集合对象</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>     * @param collection 多个对象</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">deleteObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Collection</span> collection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>collection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>     * 缓存 List 数据</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>     * @param key      缓存的键值</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>     * @param dataList 待缓存的 List 数据</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>     * @return 缓存的对象</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">long</span> <span class=\"token function\">setCacheList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> dataList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token class-name\">Long</span> count <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rightPushAll</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> dataList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">return</span> count <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>     * 获得缓存的 list 对象</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>     * @param key 缓存的键值</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>     * @return 缓存键值对应的数据</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCacheList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>     * 缓存 Set</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>     * @param key     缓存键值</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>     * @param dataSet 缓存的数据</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>     * @return 缓存数据的对象</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">BoundSetOperations</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">setCacheSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> dataSet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token class-name\">BoundSetOperations</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> setOperation <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundSetOps</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> it <span class=\"token operator\">=</span> dataSet<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            setOperation<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token keyword\">return</span> setOperation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>     * 获得缓存的 set</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>     * @param key</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCacheSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">members</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>     * 缓存 Map</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>     * @param key</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>     * @param dataMap</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCacheMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> dataMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dataMap <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">putAll</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> dataMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>     * 获得缓存的 Map</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>     * @param key</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCacheMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>     * 往 Hash 中存入数据</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>     * @param key   Redis 键</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>     * @param hKey  Hash 键</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>     * @param value 值</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCacheMapValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> hKey<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> hKey<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"166\"></td><td><pre>     * 获取 Hash 中的数据</pre></td></tr><tr><td data-num=\"167\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>     * @param key  Redis 键</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>     * @param hKey Hash 键</pre></td></tr><tr><td data-num=\"170\"></td><td><pre>     * @return Hash 中的对象</pre></td></tr><tr><td data-num=\"171\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getCacheMapValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> hKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        <span class=\"token class-name\">HashOperations</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> opsForHash <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>        <span class=\"token keyword\">return</span> opsForHash<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> hKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"178\"></td><td><pre>     * 删除 Hash 中的数据</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"180\"></td><td><pre>     * @param key</pre></td></tr><tr><td data-num=\"181\"></td><td><pre>     * @param hkey</pre></td></tr><tr><td data-num=\"182\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delCacheMapValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> hkey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>        <span class=\"token class-name\">HashOperations</span> hashOperations <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        hashOperations<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> hkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"189\"></td><td><pre>     * 获取多个 Hash 中的数据</pre></td></tr><tr><td data-num=\"190\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"191\"></td><td><pre>     * @param key   Redis 键</pre></td></tr><tr><td data-num=\"192\"></td><td><pre>     * @param hKeys Hash 键集合</pre></td></tr><tr><td data-num=\"193\"></td><td><pre>     * @return Hash 对象集合</pre></td></tr><tr><td data-num=\"194\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getMultiCacheMapValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> hKeys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiGet</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> hKeys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"200\"></td><td><pre>     * 获得缓存的基本对象列表</pre></td></tr><tr><td data-num=\"201\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"202\"></td><td><pre>     * @param pattern 字符串前缀</pre></td></tr><tr><td data-num=\"203\"></td><td><pre>     * @return 对象列表</pre></td></tr><tr><td data-num=\"204\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> pattern<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "学习笔记",
                "后端",
                "Java",
                "Spring Boot"
            ]
        },
        {
            "id": "https://windlinxy.top/2023/02/28/48a59f7d755c/",
            "url": "https://windlinxy.top/2023/02/28/48a59f7d755c/",
            "title": "Springboot自动装配",
            "date_published": "2023-02-28T13:34:47.000Z",
            "content_html": "<h1 id=\"springboot自动装配\"><a class=\"anchor\" href=\"#springboot自动装配\">#</a> Springboot 自动装配</h1>\n<h2 id=\"核心注解springbootapplication\"><a class=\"anchor\" href=\"#核心注解springbootapplication\">#</a> 核心注解 @SpringBootApplication</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Inherited</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootConfiguration</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAutoConfiguration</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>excludeFilters <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token annotation punctuation\">@Filter</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span>CUSTOM<span class=\"token punctuation\">,</span> classes <span class=\"token operator\">=</span> <span class=\"token class-name\">TypeExcludeFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token annotation punctuation\">@Filter</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span>CUSTOM<span class=\"token punctuation\">,</span> classes <span class=\"token operator\">=</span> <span class=\"token class-name\">AutoConfigurationExcludeFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">SpringBootApplication</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>@SpringBootConfiguration</strong></p>\n<pre><code>@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Configuration\n@Indexed\npublic @interface SpringBootConfiguration &#123;&#125;\n</code></pre>\n<p>@SpringBootApplication 组合了很多注解：</p>\n<ul>\n<li><strong>@EnableAutoConfiguration</strong> ：启用 SpringBoot 的自动配置\n<ul>\n<li>@AutoConfigurationPackage：主配置类（@SpringBootApplication 标注的类）的所在包以及下面所有子包里面的所有组件扫描到 Spring 容器。</li>\n<li><code>@Import(AutoConfigurationImportSelector.class)：自动装配核心功能的实现</code></li>\n</ul>\n</li>\n<li><strong>@ComponentScan</strong>：扫描 @Component（@Controller、@Service、@Repository 都包含此注解）并注入容器</li>\n<li><strong>@SpringConfiguration</strong>\n<ul>\n<li>Configuration：允许在 ApplicationContext 中注册额外的 Bean 或导入其他配置类</li>\n<li>Indexed：  项目编译打包时，会在自动生成 META-INF/spring.components 文件</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"enableautoconfiguration\"><a class=\"anchor\" href=\"#enableautoconfiguration\">#</a> @EnableAutoConfiguration</h2>\n<p>@EnableAutoConfiguration 注解中导入了 <code>AutoConfigurationImportSelector</code>  类。</p>\n<p><code>AutoConfigurationImportSelector</code>  类实现了  <code>ImportSelector</code>  接口，也就实现了这个接口中的  <code>selectImports</code>  方法，该方法主要用于<strong>获取所有符合条件的类的全限定类名，这些类需要被加载到 IOC 容器中</strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">selectImports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationMetadata</span> annotationMetadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 判断自动装配是否启动</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEnabled</span><span class=\"token punctuation\">(</span>annotationMetadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> NO_IMPORTS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 获取所有自动装配的 bean</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token class-name\">AutoConfigurationEntry</span> autoConfigurationEntry <span class=\"token operator\">=</span> <span class=\"token function\">getAutoConfigurationEntry</span><span class=\"token punctuation\">(</span>annotationMetadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toStringArray</span><span class=\"token punctuation\">(</span>autoConfigurationEntry<span class=\"token punctuation\">.</span><span class=\"token function\">getConfigurations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中 <code>getAutoConfigurationEntry(annotationMetadata)</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token class-name\">AutoConfigurationEntry</span> <span class=\"token function\">getAutoConfigurationEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationMetadata</span> annotationMetadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    \t<span class=\"token comment\">// 判断是否开启自动装配（spring.boot.enableautoconfiguration 默认为 true）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEnabled</span><span class=\"token punctuation\">(</span>annotationMetadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> EMPTY_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \t<span class=\"token comment\">// 获取 EnableAutoConfiguration 注解中的属性 exclude 和 excludeName 排除</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token class-name\">AnnotationAttributes</span> attributes <span class=\"token operator\">=</span> <span class=\"token function\">getAttributes</span><span class=\"token punctuation\">(</span>annotationMetadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token comment\">// 拿到 starter 包中 Auto 配置模块的\tMETA-INF/spring.factories 文件下的自动配置类列表（条件装配）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> configurations <span class=\"token operator\">=</span> <span class=\"token function\">getCandidateConfigurations</span><span class=\"token punctuation\">(</span>annotationMetadata<span class=\"token punctuation\">,</span> attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    \t<span class=\"token comment\">// 去重</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tconfigurations <span class=\"token operator\">=</span> <span class=\"token function\">removeDuplicates</span><span class=\"token punctuation\">(</span>configurations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    \t<span class=\"token comment\">// 获取注解的 exclude 和 excludeName 属性配置的需要排除的自动配置类全限定名的集合</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> exclusions <span class=\"token operator\">=</span> <span class=\"token function\">getExclusions</span><span class=\"token punctuation\">(</span>annotationMetadata<span class=\"token punctuation\">,</span> attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">// 检查并排除类（如果类不在 configurations 中报错此类不是自动配置类）</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    \t<span class=\"token function\">checkExcludedClasses</span><span class=\"token punctuation\">(</span>configurations<span class=\"token punctuation\">,</span> exclusions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    \t<span class=\"token comment\">// 移除所有 exclude 和 excludeName 属性配置的需要排除的自动配置类</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tconfigurations<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span>exclusions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    \t<span class=\"token comment\">// 对 configurations 进行过滤，剔除掉条件不成立的配置类，@Conditional 有关</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tconfigurations <span class=\"token operator\">=</span> <span class=\"token function\">getConfigurationClassFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>configurations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    \t<span class=\"token comment\">// 监听器 import 事件回调</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token function\">fireAutoConfigurationImportEvents</span><span class=\"token punctuation\">(</span>configurations<span class=\"token punctuation\">,</span> exclusions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AutoConfigurationEntry</span><span class=\"token punctuation\">(</span>configurations<span class=\"token punctuation\">,</span> exclusions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最后方法返回了一个 <code>AutoConfigurationEntry</code> ，它是 AutoConfigurationImportSelector 的内部类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AutoConfigurationEntry</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> configurations<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> exclusions<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">AutoConfigurationEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>configurations <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>exclusions <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t * Create an entry with the configurations that were contributed and their</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t * exclusions.</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t * @param configurations the configurations that should be imported</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t * @param exclusions the exclusions that were applied to the original list</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token class-name\">AutoConfigurationEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> configurations<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> exclusions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>configurations <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>configurations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>exclusions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>exclusions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getConfigurations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>configurations<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getExclusions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>exclusions<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最后 <code>selectImports(AnnotationMetadata annotationMetadata)</code>  方法返回一个配置类的全限定名数组。</p>\n<h1 id=\"自定义starter\"><a class=\"anchor\" href=\"#自定义starter\">#</a> 自定义 Starter</h1>\n<p><em>代码参考：尚硅谷 springboot2 课程</em></p>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/202302282123708.png\" alt=\"image-20230228212127676\" /></p>\n<ol>\n<li>\n<p>准备一个空工程</p>\n</li>\n<li>\n<p>新建一个 Maven 模块，命名为 <code>XXX-spring-boot-start</code>  充当启动器</p>\n<p><strong>pom 文件：</strong></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>per.windlinxy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>windlinxy-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>per.windlnxy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>windlinxy-spring-boot-starter-autoconfigure<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.1-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>再使用 Spring Initializr 创建一个模块，命名为 <code>XXX-spring-boot-start-autoconfigure</code></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.7.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>relativePath</span><span class=\"token punctuation\">/></span></span> <span class=\"token comment\">&lt;!-- lookup parent from repository --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>per.windlnxy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>windlinxy-spring-boot-starter-autoconfigure<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.1-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>windlinxy-spring-boot-starter-autoconfigure<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>windlinxy-spring-boot-starter-autoconfigure<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>java.version</span><span class=\"token punctuation\">></span></span>8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>java.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>在 <code>XXX-spring-boot-start-autoconfigure</code>  模块编写代码</p>\n</li>\n<li>\n<p>使用 maven 进行 install 将两个模块注入到本地 maven 仓库</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>per</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>├─windlinxy</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>│  └─windlinxy-spring-boot-starter</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>│      └─1.0-SNAPSHOT</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>└─windlnxy</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    └─windlinxy-spring-boot-starter-autoconfigure</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        └─0.0.1-SNAPSHOT</pre></td></tr></table></figure></li>\n<li>\n<p>在另外的项目进行注册</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>per.windlinxy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>windlinxy-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>使用</p>\n<p>配置文件：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">prefix</span><span class=\"token punctuation\">:</span> <span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">suffix</span><span class=\"token punctuation\">:</span> <span class=\"token number\">666</span></pre></td></tr></table></figure><p>Controller：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HelloService</span> helloService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> helloService<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p><code>HelloServiceAutoConfiguration</code>  自动配置类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ConditionalOnMissingBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 会将 HelloProperties 自动注入容器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@EnableConfigurationProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloProperties</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloServiceAutoConfiguration</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HelloService</span> <span class=\"token function\">helloService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>HelloProperties</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloProperties</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> prefix<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> suffix<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getPrefix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> prefix<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPrefix</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> prefix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prefix <span class=\"token operator\">=</span> prefix<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSuffix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> suffix<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSuffix</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> suffix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>suffix <span class=\"token operator\">=</span> suffix<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>HelloService</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 默认不放入容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HelloProperties</span> helloProperties<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> helloProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getPrefix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> username <span class=\"token operator\">+</span> helloProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getSuffix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>resources/META-INF/spring.factiories</strong> 文件</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Auto Configure</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">\\</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>per.windlnxy.auto.HelloServiceAutoConfiguration</span></pre></td></tr></table></figure>",
            "tags": [
                "学习笔记",
                "后端",
                "Java",
                "Spring Boot"
            ]
        },
        {
            "id": "https://windlinxy.top/2023/01/21/6c40bdfa1892/",
            "url": "https://windlinxy.top/2023/01/21/6c40bdfa1892/",
            "title": "java注解",
            "date_published": "2023-01-21T14:54:47.000Z",
            "content_html": "<h1 id=\"注解学习\"><a class=\"anchor\" href=\"#注解学习\">#</a> 注解学习</h1>\n<blockquote>\n<p>JDK1.5 开始引入<strong>注解（Annotation）</strong>，Java 中类、方法、变量、参数都可以被标注。</p>\n<p>注解主要作用：</p>\n<ul>\n<li>生成文档，通过代码中标识的注解生成 javadoc 文档。</li>\n<li>编译检查，通过代码中标识的注解让编译器在编译期间进行检查。</li>\n<li>编译时动态处理，编译时通过代码里标识的注解动态处理，例如动态生成代码。</li>\n<li>运行时动态处理，运行时通过代码里标识的注解动态处理，例如使用反射注入实例。</li>\n</ul>\n</blockquote>\n<p><em>关于三个名词：元注解（meta-annotation）、元数据（meta-data）、注解（annotation），我个人认为元注解是注解注解的注解，元数据是注解别称。</em></p>\n<h2 id=\"jdk内置的注解\"><a class=\"anchor\" href=\"#jdk内置的注解\">#</a> JDK 内置的注解</h2>\n<h3 id=\"override\"><a class=\"anchor\" href=\"#override\">#</a> @Override</h3>\n<p>在  <code>java.lang</code>  包下，表示当前的方法定义将覆盖父类中的方法。</p>\n<ul>\n<li>作用于方法</li>\n<li>源码保留级别</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>SOURCE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Override</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"deprecated\"><a class=\"anchor\" href=\"#deprecated\">#</a> @Deprecated</h3>\n<p>在  <code>java.lang</code>  包下，表示代码被弃用，如果使用了被 @Deprecated 注解的代码则编译器将发出警告。</p>\n<ul>\n<li>生成文档</li>\n<li>运行时保留级别</li>\n<li>作用于构造器、属性、局部变量、方法、包、参数、类型</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>CONSTRUCTOR<span class=\"token punctuation\">,</span> FIELD<span class=\"token punctuation\">,</span> LOCAL_VARIABLE<span class=\"token punctuation\">,</span> METHOD<span class=\"token punctuation\">,</span> PACKAGE<span class=\"token punctuation\">,</span> PARAMETER<span class=\"token punctuation\">,</span> TYPE<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Deprecated</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"suppvisewarnings\"><a class=\"anchor\" href=\"#suppvisewarnings\">#</a> @Suppvisewarnings</h3>\n<p>在  <code>java.lang</code>  包下，告诉编译器忽略指定的\t警告信息。</p>\n<ul>\n<li>可修饰包括类型、属性、方法、参数、构造器、局部变量</li>\n<li>源码保留级别</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>TYPE<span class=\"token punctuation\">,</span> FIELD<span class=\"token punctuation\">,</span> METHOD<span class=\"token punctuation\">,</span> PARAMETER<span class=\"token punctuation\">,</span> CONSTRUCTOR<span class=\"token punctuation\">,</span> LOCAL_VARIABLE<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>SOURCE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">SuppressWarnings</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 抑制单类型的警告：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addItems</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rawtypes\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">List</span> items <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            ……</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 抑制多类型的警告：</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rawtypes\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addItems</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            ……</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>具体警告类型查表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:left\">原描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">all</td>\n<td style=\"text-align:center\">抑制所有警告</td>\n<td style=\"text-align:left\">to suppress all warnings</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">boxing</td>\n<td style=\"text-align:center\">抑制装箱、拆箱操作时候的警告</td>\n<td style=\"text-align:left\">to suppress warnings relative to boxing/unboxing operations</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cast</td>\n<td style=\"text-align:center\">抑制映射相关的警告</td>\n<td style=\"text-align:left\">to suppress warnings relative to cast operations</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dep-ann</td>\n<td style=\"text-align:center\">抑制启用注释的警告</td>\n<td style=\"text-align:left\">to suppress warnings relative to deprecated annotation</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">deprecation</td>\n<td style=\"text-align:center\">抑制过期方法警告</td>\n<td style=\"text-align:left\">to suppress warnings relative to deprecation</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fallthrough</td>\n<td style=\"text-align:center\">抑制确在 switch 中缺失 breaks 的警告</td>\n<td style=\"text-align:left\">to suppress warnings relative to missing breaks in switch statements</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">finally</td>\n<td style=\"text-align:center\">抑制 finally 模块没有返回的警告</td>\n<td style=\"text-align:left\">to suppress warnings relative to finally block that don’t return</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hiding</td>\n<td style=\"text-align:center\">抑制与隐藏变数的区域变数相关的警告</td>\n<td style=\"text-align:left\">to suppress warnings relative to locals that hide variable（）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">incomplete-switch</td>\n<td style=\"text-align:center\">忽略没有完整的 switch 语句</td>\n<td style=\"text-align:left\">to suppress warnings relative to missing entries in a switch statement (enum case)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">nls</td>\n<td style=\"text-align:center\">忽略非 nls 格式的字符</td>\n<td style=\"text-align:left\">to suppress warnings relative to non-nls string literals</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">null</td>\n<td style=\"text-align:center\">忽略对 null 的操作</td>\n<td style=\"text-align:left\">to suppress warnings relative to null analysis</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rawtype</td>\n<td style=\"text-align:center\">使用 generics 时忽略没有指定相应的类型</td>\n<td style=\"text-align:left\">to suppress warnings relative to un-specific types when using</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">restriction</td>\n<td style=\"text-align:center\">抑制与使用不建议或禁止参照相关的警告</td>\n<td style=\"text-align:left\">to suppress warnings relative to usage of discouraged or</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">serial</td>\n<td style=\"text-align:center\">忽略在 serializable 类中没有声明 serialVersionUID 变量</td>\n<td style=\"text-align:left\">to suppress warnings relative to missing serialVersionUID field for a serializable class</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">static-access</td>\n<td style=\"text-align:center\">抑制不正确的静态访问方式警告</td>\n<td style=\"text-align:left\">to suppress warnings relative to incorrect static access</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">synthetic-access</td>\n<td style=\"text-align:center\">抑制子类没有按最优方法访问内部类的警告</td>\n<td style=\"text-align:left\">to suppress warnings relative to unoptimized access from inner classes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unchecked</td>\n<td style=\"text-align:center\">抑制没有进行类型检查操作的警告</td>\n<td style=\"text-align:left\">to suppress warnings relative to unchecked operations</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unqualified-field-access</td>\n<td style=\"text-align:center\">抑制没有权限访问的域的警告</td>\n<td style=\"text-align:left\">to suppress warnings relative to field access unqualified</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unused</td>\n<td style=\"text-align:center\">抑制没被使用过的代码的警告</td>\n<td style=\"text-align:left\">to suppress warnings relative to unused code</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"元注解\"><a class=\"anchor\" href=\"#元注解\">#</a> 元注解</h2>\n<blockquote>\n<p>元注解就是注解注解的注解，一般用于修饰注解</p>\n</blockquote>\n<pre><code>\t除了JDK定义好的注解，我们还可以自定义注解，JDK1.5提供了四个标准用来对注解类型进行注解的注解类\n</code></pre>\n<ul>\n<li>\n<p>@Target</p>\n</li>\n<li>\n<p>@Retention</p>\n</li>\n<li>\n<p>@Document</p>\n</li>\n<li>\n<p>@Inherited</p>\n</li>\n</ul>\n<h4 id=\"target注解\"><a class=\"anchor\" href=\"#target注解\">#</a> @Target 注解</h4>\n<blockquote>\n<p>描述注解的使用范围</p>\n</blockquote>\n<p>Target 注解用来说明被注解的注解类可修饰的对象的范围：</p>\n<pre><code>\t注解可以修饰packages types（类、接口、枚举、注解类）、类成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量\n</code></pre>\n<p>取值范围在 ElementType 枚举中：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ElementType</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    TYPE<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 类、接口、枚举类</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    FIELD<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 成员变量（包括：枚举常量）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    METHOD<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 成员方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    PARAMETER<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 方法参数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    CONSTRUCTOR<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 构造方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    LOCAL_VARIABLE<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 局部变量</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    ANNOTATION_TYPE<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 注解类</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    PACKAGE<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 可用于修饰：包</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    TYPE_PARAMETER<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 类型参数，JDK 1.8 新增</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    TYPE_USE <span class=\"token comment\">// 使用类型的任何地方，JDK 1.8 新增</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"retention注解\"><a class=\"anchor\" href=\"#retention注解\">#</a> @Retention 注解</h4>\n<blockquote>\n<p>描述注解保留的时间范围</p>\n</blockquote>\n<pre><code>\t限定所注解的注解类注解到其他类上后，可以被保留到何时，一共三个策略，定义在RetentionPolicy枚举中：\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">RetentionPolicy</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    SOURCE<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 源文件保留</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    CLASS<span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 编译期保留，默认值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    RUNTIME   <span class=\"token comment\">// 运行期保留，可通过反射去获取注解信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"documented注解\"><a class=\"anchor\" href=\"#documented注解\">#</a> @Documented 注解</h4>\n<blockquote>\n<p>描述在使用 javadoc 工具为类生成帮助文档时是否需要保留注解信息</p>\n</blockquote>\n<h4 id=\"inherited注解\"><a class=\"anchor\" href=\"#inherited注解\">#</a> @Inherited 注解</h4>\n<blockquote>\n<p>使被修饰的注解具有继承性</p>\n</blockquote>\n<h2 id=\"注解与反射\"><a class=\"anchor\" href=\"#注解与反射\">#</a> 注解与反射</h2>\n<p>我们知道 spring 中有很多注解很实用，如使用注解驱动 ioc 依赖注入，好的注解可以简化代码提高效率。</p>\n<h3 id=\"annotationelement\"><a class=\"anchor\" href=\"#annotationelement\">#</a> AnnotationElement</h3>\n<p>在 <code>java.lang.reflect</code>  包下有  <code>AnnotationElement</code>  接口，标识一个被注解的 Java 语言元素（Class、Method、Field、Constructor、GenericDeclaration 等对应的实现都实现了该接口），用于获取注解的内容。** 注意：只有注解作用范围定义为 RUNTIME 时，该注解才运行时可见，这样 class 文件被装载时其中的注解才能被虚拟机读取。 **</p>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/202301210952871.png\" alt=\"image-20230121095228782\" /></p>\n<p>方法使用：</p>\n<ul>\n<li><code>isAnnotationPresent(Class&lt;? extends Annotation&gt;)</code></li>\n</ul>\n<p>判断元素上是否包含指定类型的注解，包含则返回 true，反之 false</p>\n<ul>\n<li>\n<p><code>getAnnotation(Class&lt;T&gt;)</code></p>\n<p>返回该元素上的注解，不存在返回 null</p>\n</li>\n<li>\n<p><code>getAnnotations()</code></p>\n<p>返回该元素存在的所有注解（数组形式），无注解返回长度 0 的数组</p>\n</li>\n<li>\n<p><code>getAnnotationsByType(Class&lt;T&gt;)</code></p>\n<p>返回指定类型的注解数组</p>\n</li>\n<li>\n<p>另外加 <code>Declared</code>  的方法跟不加的差不多，只不过多了一个<strong>忽略继承的注解</strong></p>\n</li>\n</ul>\n<h2 id=\"自定义注解\"><a class=\"anchor\" href=\"#自定义注解\">#</a> 自定义注解</h2>\n<p>注解 <code>@Extra</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">,</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>FIELD<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Inherited</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Extra</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Type</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         * 类</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        CLASS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         * 方法</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        METHOD</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 声明枚举</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">Type</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">Type</span><span class=\"token punctuation\">.</span>CLASS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"默认\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用注解的类 <code>TestAnnotation</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestAnnotation</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Extra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"覆盖默认A\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hasAnnoA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Extra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"覆盖默认B\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hasAnnoB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">noAnno</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>主类 <code>Main</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 获取 TestAnnotation 所有方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods <span class=\"token operator\">=</span> <span class=\"token class-name\">TestAnnotation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//Lambda 取 methods 中注解了 @Extra 的方法的注解值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>methods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>method <span class=\"token operator\">-></span> method<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Extra</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>method <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Extra</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 上面 Lambda 等同于下面 foreach</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method<span class=\"token operator\">:</span> methods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Extra</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Extra</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>显示：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>覆盖默认A</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>覆盖默认B</pre></td></tr></table></figure>",
            "tags": [
                "学习笔记",
                "后端",
                "Java"
            ]
        },
        {
            "id": "https://windlinxy.top/2022/12/22/d771f6aaedde/",
            "url": "https://windlinxy.top/2022/12/22/d771f6aaedde/",
            "title": "数据库复习",
            "date_published": "2022-12-22T13:22:52.000Z",
            "content_html": "<h1 id=\"数据库\"><a class=\"anchor\" href=\"#数据库\">#</a> 数据库</h1>\n<h2 id=\"dbms\"><a class=\"anchor\" href=\"#dbms\">#</a> DBMS</h2>\n<p>DataBase Management System</p>\n<ul>\n<li>数据是数据库存储的基本对象</li>\n<li>数据库是存放数据的仓库</li>\n<li>数据库管理系统是位于用户与操作系统之间的一层数据管理软件。数据库管理系统与操作系统一样，是计算机的基础软件。</li>\n</ul>\n<p>主要功能：</p>\n<ul>\n<li>DDl 数据定义语言</li>\n<li>DML 数据操纵 (Manipulation) 语言</li>\n</ul>\n<p>DBS：数据库系统是由数据库，数据库管理系统、应用程序和数据库管理员组成的存储、管理、处理和维护数据的系统。</p>\n<p>数据库系统与文件系统的本质区别：数据库系统实现整体数据的结构化</p>\n<blockquote>\n<p>模式：也称逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。</p>\n<p>外模式：数据库的全局逻辑结构，所有用户公共的数据视图</p>\n<p>内模式：也称存储模式，是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式。</p>\n</blockquote>\n<p>数据库设计的步骤：</p>\n<ol>\n<li>需求分析</li>\n<li>概念结构设计</li>\n<li>逻辑结构设计</li>\n<li>物理结构设计</li>\n<li>数据库实施</li>\n<li>数据库的运行和维护</li>\n</ol>\n<p><strong>需求分析</strong>：进行数据库设计首先必须准确了解与分析用户需求。需求分析是整个设计过程的基础</p>\n<p><strong>概念结构设计：<strong>通过对用户需求进行</strong>综合、归纳与抽象</strong>形成一个独立于具体 DBMS 的概念模型。</p>\n<p><strong>逻辑结构设计</strong>：将概念结构转化为某个数据库管理系统所支持的数据模型，并对其进行优化</p>\n<p><strong>物理结构设计阶段</strong>：为逻辑数据模型选取一个最适合应用环境的物理结构（包括存储结构和存取方法</p>\n<h2 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h2>\n<p>事务是用户定义的一个数据库操作序列</p>\n<p><strong>事务与程序是两个概念</strong></p>\n<ul>\n<li>一个事务可以是一条 SQL 语句，一组 SQl 语句或整个程序</li>\n<li>一个应用程序包含多个事务</li>\n</ul>\n<p><strong>事务是并发控制和恢复的基本单位</strong>、</p>\n<p>定义事务：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">begin</span> <span class=\"token keyword\">transaction</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">rollback</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">commit</span></pre></td></tr></table></figure><p>若用户未显式定义事务，DBMS 按默认设置划分</p>\n<p>事务特性</p>\n<ul>\n<li>原子性 Atomic：事务是数据库操作的逻辑单位</li>\n<li>一致性 Consistency：事务的执行结果是数据库从一个一致性状态到另一个一致性状态</li>\n<li>隔离性 Isolation：并发执行的事务之间不能互相干扰</li>\n<li>持久性 Durability：一个事务一旦提交对数据库中数据的改变是永久的</li>\n</ul>\n<h3 id=\"锁\"><a class=\"anchor\" href=\"#锁\">#</a> 锁</h3>\n<p>基本锁类型：</p>\n<ul>\n<li>排它锁或写锁</li>\n<li>共享锁或读锁</li>\n</ul>\n<p><strong>并发事务调度正确性的唯一准则：可串行化</strong></p>\n<p>几个事务并行执行时正确的当且仅当其结果与某一次序串行执行的结果相同</p>\n<p>保证并发调度正确性的方法：两段锁协议：</p>\n<ol>\n<li>事务对任何数据进行读写操作之前，首先要获得对改数据的封锁</li>\n<li>事务一旦开始释放锁，不允许其再获得其他锁</li>\n</ol>\n<p>事务执行分为了两个阶段</p>\n<ol>\n<li>加锁，扩展阶段</li>\n<li>解锁，收缩阶段</li>\n</ol>\n<p>对一个数据库节点加意向锁表示最它下一个节点加 X/S 锁</p>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/202212220930210.png\" alt=\"image-20221222093028992\" /></p>\n<p>锁的强度：X 》SIX 》S/IX 》IS</p>\n<p>申请封锁：自上而下</p>\n<p>释放封锁：自下而上</p>\n<h2 id=\"数据库恢复技术\"><a class=\"anchor\" href=\"#数据库恢复技术\">#</a> 数据库恢复技术</h2>\n<p><strong>故障是不可避免的：</strong></p>\n<ul>\n<li>计算机硬件故障</li>\n<li>系统软件和硬件故障</li>\n<li>操作员的失误</li>\n<li>程序 BUG</li>\n<li>恶意的破坏、病毒</li>\n</ul>\n<p><strong>故障种类：</strong></p>\n<ul>\n<li>\n<p><strong>事务故障</strong></p>\n<p>常见原因：</p>\n<ul>\n<li>输入数据有误</li>\n<li>运算溢出</li>\n<li>违反了某些完整性限制</li>\n<li>应用程序出错</li>\n<li>并行事务发生死锁</li>\n</ul>\n<p>恢复：</p>\n<ul>\n<li>强行回滚</li>\n</ul>\n</li>\n<li>\n<p><strong>系统故障</strong>：</p>\n<ul>\n<li>整个系统正常运行突然被破坏</li>\n<li>所有正在运行的事务都非正常停止</li>\n<li>内存中数据库缓冲区的信息全部丢失</li>\n<li>外存上的数据未受影响</li>\n</ul>\n<p>常见原因：</p>\n<ul>\n<li>操作系统或 DBMS 代码错误</li>\n<li>操作员失误</li>\n<li>特定的硬件错误</li>\n<li>突然停电</li>\n</ul>\n<p>恢复：</p>\n<ul>\n<li>\n<p>Rollback 回滚所有未完成事务（UNDO</p>\n</li>\n<li>\n<p>Commited 已提交的事务可能有未来得及写入磁盘的内容 REDO</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>介质故障</strong></p>\n<ul>\n<li>存储在外存中的数据部分或全部丢失\n<ul>\n<li>磁盘损坏</li>\n<li>磁头碰撞</li>\n<li>瞬时强电磁场</li>\n<li>操作系统某种潜在错误\n<ul>\n<li>装入 数据库发生介质故障前某个时刻的数据副本</li>\n<li>重做滋此时所有成功事务，讲这些事务已提交的结果重新计入数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"恢复的实现技术\"><a class=\"anchor\" href=\"#恢复的实现技术\">#</a> 恢复的实现技术</h3>\n<ul>\n<li>数据转储：静态转储 / 动态转储 海量转储 / 增量转储</li>\n<li>登记日志文件</li>\n</ul>\n<p><strong>静态转储：</strong></p>\n<ul>\n<li>在系统中无运行事务时进行转储</li>\n<li>转储开始时数据库处于一致性状态</li>\n<li>转储期间不允许对数据库的任何存取、修改</li>\n</ul>\n<p>优点：实现简单</p>\n<p>缺点：降低了数据库的可用性</p>\n<p>转储必须等待事务结束，新的事务必须等待转储结束</p>\n<p><strong>动态转储</strong></p>\n<p>转储操作与事务并发进行，转储时允许对数据库进行存取、修改</p>\n<p>优点：不用等待正在运行的事务结束，不会影响事务的运行</p>\n<p>缺点：不能保证副本中的数据全部正确有效</p>\n<p>海量转储：每次转储全部数据库</p>\n<p>增量转储：只转储上次转储后更新过的数据</p>\n<p>比较：</p>\n<ul>\n<li>从恢复的角度看，海量转储得到的后备副本往往更方便恢复</li>\n<li>如果数据库很大，事务十分频繁，增量转储的方式更实用有效</li>\n</ul>\n<h3 id=\"日志文件\"><a class=\"anchor\" href=\"#日志文件\">#</a> 日志文件</h3>\n<p>日志：记录事务对数据库更新操作的文件</p>\n<p>日志文件的格式：</p>\n<ul>\n<li>以记录为单位的日志文件</li>\n<li>以数据块为单位的日志文件</li>\n</ul>\n<p>日志文件内容：每个事务开始 / 结束，每个事务的更新操作</p>\n<ul>\n<li>事务开始 start / 事务结束 commit</li>\n<li>记录每一个更新操作：\n<ul>\n<li>事务标识</li>\n<li>操作类型</li>\n<li>数据对象</li>\n<li>更新前的旧值</li>\n<li>更新后的值</li>\n</ul>\n</li>\n</ul>\n<p><strong>登记日志文件必须遵守两条原则：</strong></p>\n<ul>\n<li>登记的次序严格按照事务的执行<strong>时间次序</strong></li>\n<li>必须先写日志文件，后写数据库</li>\n</ul>\n<h3 id=\"恢复策略\"><a class=\"anchor\" href=\"#恢复策略\">#</a> 恢复策略</h3>\n<ul>\n<li>\n<p>事务故障的恢复：事务在运行在正常终止点前被终止</p>\n<p>由恢复子系统应利用日志文件撤销此事务已对数据库进行的修改</p>\n</li>\n<li>\n<p>系统故障的恢复：系统重启时自动完成</p>\n<p>UNDO 故障发生时未提交的事务</p>\n<p>REDO 故障发生时已提交的事务</p>\n</li>\n<li>\n<p>介质故障的恢复</p>\n<p>重装数据库备份，使数据库恢复到一致性状态</p>\n<p>REDO 已完成的事务</p>\n</li>\n</ul>\n<p>无日志、使用静态转储副本进行恢复：</p>\n<p>正常运行：Ta = 静态转储 =&gt; Tb = 运行事务 =&gt; Tf</p>\n<p>恢复：重装后备副本 ==》重新运行事务</p>\n<h2 id=\"程序设计\"><a class=\"anchor\" href=\"#程序设计\">#</a> 程序设计</h2>\n<p><strong>增：</strong>  <code>insert into 表名 values();</code>  或者 <code>insert into 表名(列名...) values();</code></p>\n<p><strong>删：</strong> <code>delete from 表名 where……;</code></p>\n<p><strong>改：</strong> <code>update 表名 set 列名 = …… where ……;</code></p>\n<p><strong>查：</strong> <code>select */列名 from 表名 / where; </code></p>\n<p><strong>视图</strong>： <code>create view name as select……;</code></p>\n<h3 id=\"触发器\"><a class=\"anchor\" href=\"#触发器\">#</a> 触发器</h3>\n<p><code>create</code>    <code>after</code>   <code>referencing</code>   <code>for</code>   <code>begin</code> ……</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TRIGGER</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">EXISTS</span> testi<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 如果存在 testi 触发器则删除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span> testi </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">AFTER</span> <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">ON</span> <span class=\"token keyword\">table</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">FOR EACH ROW</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> bysj_dt <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>new<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>new<span class=\"token punctuation\">.</span>et_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">END</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">trigger</span> test</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">after</span> <span class=\"token keyword\">delete</span> <span class=\"token keyword\">on</span> Student</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>referencing old <span class=\"token keyword\">row</span> <span class=\"token keyword\">as</span> orow</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">FOR EACH ROW</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">begin</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> SC <span class=\"token keyword\">WHERE</span> SC<span class=\"token punctuation\">.</span>Sno <span class=\"token operator\">=</span> orow<span class=\"token punctuation\">.</span>Sno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><h3 id=\"存储过程\"><a class=\"anchor\" href=\"#存储过程\">#</a> 存储过程</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">procedure</span> countByDept<span class=\"token punctuation\">(</span><span class=\"token operator\">in</span> deptName <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> cnt <span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">begin</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">into</span> cnt</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">from</span> student</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">where</span> student<span class=\"token punctuation\">.</span>Sdept <span class=\"token operator\">=</span> deptName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 调用存储过程</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">call</span> countByDept<span class=\"token punctuation\">(</span><span class=\"token string\">'CS'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">@cnt</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token variable\">@cnt</span></pre></td></tr></table></figure><h3 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">function</span> countByDept<span class=\"token punctuation\">(</span>deptName <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">returns</span> <span class=\"token keyword\">integer</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">begin</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">declare</span> cnt <span class=\"token keyword\">integer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">into</span> cnt</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">from</span> student</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">where</span> student<span class=\"token punctuation\">.</span>Stept <span class=\"token operator\">=</span> deptName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">end</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 调用函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">select</span> countByDept<span class=\"token punctuation\">(</span><span class=\"token string\">\"CS\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"jdbc\"><a class=\"anchor\" href=\"#jdbc\">#</a> JDBC</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> testjdbc<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.mariadb.jdbc.Driver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pass forName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">Connection</span> conn <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc:mysql://localhost:3306/StuCou\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">Statement</span> stmt <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">String</span> query <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from Student\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">ResultSet</span> rs <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">excuteQuery</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                sout……</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            conn<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token function\">sout</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getSQLState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">sout</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getErrorCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "数据库考试"
            ]
        },
        {
            "id": "https://windlinxy.top/2022/11/19/317a105d7096/",
            "url": "https://windlinxy.top/2022/11/19/317a105d7096/",
            "title": "项目部署云服务器流程",
            "date_published": "2022-11-19T06:05:04.000Z",
            "content_html": "<h1 id=\"安全相关\"><a class=\"anchor\" href=\"#安全相关\">#</a> 安全相关</h1>\n<h2 id=\"防火墙开放端口\"><a class=\"anchor\" href=\"#防火墙开放端口\">#</a> 防火墙开放端口</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">端口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Tomcat 外部访问</td>\n<td style=\"text-align:center\">8080-9000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Mysql 远程连接</td>\n<td style=\"text-align:center\">3306</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Redis 远程连接</td>\n<td style=\"text-align:center\">6379</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RabbitMQ：Web 界面</td>\n<td style=\"text-align:center\">15672</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Rabbit： AMQP</td>\n<td style=\"text-align:center\">5672</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Rabbit：Stomp</td>\n<td style=\"text-align:center\">61613</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Rabbit：MQTT</td>\n<td style=\"text-align:center\">1883</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"openjdk安装\"><a class=\"anchor\" href=\"#openjdk安装\">#</a> openjdk 安装</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">su</span> -c <span class=\"token string\">\"yum install java-1.8.0-openjdk\"</span></pre></td></tr></table></figure><h1 id=\"yum仓库管理\"><a class=\"anchor\" href=\"#yum仓库管理\">#</a> yum 仓库管理</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum-config-manager --add-repo http://mirrors.aliyun.com/dockerce/linux/centos/docker-ce.repo</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum-config-manager <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>--add-repo <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>https://download.docker.com/linux/centos/docker-ce.repo</pre></td></tr></table></figure><h1 id=\"mysql安装\"><a class=\"anchor\" href=\"#mysql安装\">#</a> mysql 安装</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 移除自带 mariab 数据库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum remove -y <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">rpm</span> -aq mariadb*<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 查询本机是否有 mysql</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">rpm</span> -qa <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> mysql</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 获取 mysql 安装包</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">wget</span> -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 安装</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>yum -y <span class=\"token function\">install</span> mysql57-community-release-el7-10.noarch.rpm</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 关闭 gpg 签名</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>yum -y <span class=\"token function\">install</span> mysql-community-server --nogpgcheck</pre></td></tr></table></figure><p><strong>mysql 初始化</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl start  mysqld.service</pre></td></tr></table></figure><p><strong>修改密码</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#获取初始密码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token string\">'password'</span> /var/log/mysqld.log</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ALTER <span class=\"token environment constant\">USER</span> <span class=\"token environment constant\">USER</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> IDENTIFIED BY <span class=\"token string\">'root'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>设置远程连接权限</strong></p>\n<pre><code>grant all privileges on *.* to root@'%' identified by &quot;password&quot;;\n</code></pre>\n<h1 id=\"redis安装\"><a class=\"anchor\" href=\"#redis安装\">#</a> redis 安装</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 执行以下命令升级 gcc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> gcc-c++ </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 安装软件集 scl</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>yum -y <span class=\"token function\">install</span> centos-release-scl</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>yum -y <span class=\"token function\">install</span> devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>scl <span class=\"token builtin class-name\">enable</span> devtoolset-9 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">echo</span> “source /opt/rh/devtoolset-9/enable” <span class=\"token operator\">>></span> /etc/profile</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 获取安装包</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">wget</span> https://download.redis.io/redis-stable.tar.gz </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">tar</span> -zxvf redis-stable.tar.gz </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 进入 redis 目录</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#编译</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#安装</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">##### 安装完成</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>后台启动</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /usr/local/redis-stable</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">cp</span> redis.conf redis.conf.bak</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 编辑配置文件</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 将 bind 注释（远程连接） </span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># protected-mode no 无密码登录</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># daemonize yes 后台启动</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token function\">vim</span> redis.conf</pre></td></tr></table></figure><h1 id=\"nginx\"><a class=\"anchor\" href=\"#nginx\">#</a> Nginx</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># nginx 需要 gcc 环境，没有就安装</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> gcc-c++</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Nginx 的 http 模块需要使用 pcre 来解析正则表达式，需要安装 pcre</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>yum <span class=\"token function\">install</span> -y pcre pcre-devel</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 安装依赖的解压包</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>yum <span class=\"token function\">install</span> -y zlib zlib-devel</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># ssl 功能需要 openssl 库，安装 openssl</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>yum <span class=\"token function\">install</span> -y openssl openssl-devel</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 下载 nginx</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">wget</span> https://nginx.org/download/nginx-1.22.1.tar.gz</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 解压</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">tar</span> -zxvf nginx-1.22.1.tar.gz</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /usr/local/nginx</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 配置安装路径，否则默认 /usr/bin</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>./configure --prefix<span class=\"token operator\">=</span>/usr/local/nginx</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">mkdir</span> logs</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#编译</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#安装，可能会报错，但是会安装成功</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><h1 id=\"docker\"><a class=\"anchor\" href=\"#docker\">#</a> Docker</h1>\n<blockquote>\n<p>使用 docker 可以轻松布置环境</p>\n</blockquote>\n<h2 id=\"安装步骤\"><a class=\"anchor\" href=\"#安装步骤\">#</a> 安装步骤</h2>\n<ol>\n<li>\n<p>官网安装手册：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvY2VudG9zLw==\">https://docs.docker.com/engine/install/centos/</span></p>\n</li>\n<li>\n<p>确定是 CentOS7 以上版本</p>\n</li>\n<li>\n<p>yum 安装 gcc 相关环境：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum -y <span class=\"token function\">install</span> gcc</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum -y <span class=\"token function\">install</span> gcc-c++</pre></td></tr></table></figure></li>\n<li>\n<p>卸载旧版本</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum remove <span class=\"token function\">docker</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker-client <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker-client-latest <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>docker-common <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>docker-lastest <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>docker-latest-logrotate <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>docker-logrotate <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>docker-engine</pre></td></tr></table></figure></li>\n<li>\n<p>安装需要软件包</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> -y yum-utils</pre></td></tr></table></figure></li>\n<li>\n<p>设置镜像仓库</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum-config-manager <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--add-repo <span class=\"token punctuation\">\\</span> https://download.docker.com/linux/centos/docker-ce.repo</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</pre></td></tr></table></figure></li>\n<li>\n<p>更新 yum 软件包索引</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum makecache fast</pre></td></tr></table></figure></li>\n<li>\n<p>安装 Docker CE</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> docker-ce-cli containerd.io</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> -y docker-ce</pre></td></tr></table></figure></li>\n<li>\n<p>启动 Docker</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl start <span class=\"token function\">docker</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> version</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> run hello-world</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> images</pre></td></tr></table></figure></li>\n<li>\n<p>卸载</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl stop <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>yum -y remove docker-ce docker-ce-cli containerd.io</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">rm</span> -rf /var/lib/docker</pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"阿里云镜像加速\"><a class=\"anchor\" href=\"#阿里云镜像加速\">#</a> 阿里云镜像加速</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> -p /etc/docker</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/docker/daemon.json <span class=\"token operator\">&lt;&lt;-</span><span class=\"token string\">'EOF'</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\"registry-mirrors\": [\"https://qiyb9988.mirror.aliyuncs.com\"]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>EOF</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">sudo</span> systemctl daemon-reload</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">sudo</span> systemctl restart <span class=\"token function\">docker</span></pre></td></tr></table></figure><h2 id=\"实用\"><a class=\"anchor\" href=\"#实用\">#</a> 实用</h2>\n<blockquote>\n<p>&lt;span style=&quot;color:red&quot;&gt; 注意！在 Docker 运行的容器是访问不到宿主机其他端口的，localhost 是用不了的，需要用 <code>ip addr show docker0</code>  命令找到 docker 容器能够识别的本机 ip，然后将项目中的连接 ip 修改成获得的 ip&lt;/span&gt;</p>\n</blockquote>\n<h3 id=\"可视化面板\"><a class=\"anchor\" href=\"#可视化面板\">#</a> 可视化面板</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run -d -p <span class=\"token number\">8088</span>:9000 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--restart<span class=\"token operator\">=</span>always -v /var/run/docker.sock:/var/run/docker.sock --privileged<span class=\"token operator\">=</span>true portainer/portainer</pre></td></tr></table></figure><h3 id=\"tomcat\"><a class=\"anchor\" href=\"#tomcat\">#</a> Tomcat</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># tomcat 部署</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 端口映射：-p 8080:8080</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 后台运行：-d</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 容器名：--name</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># webapps 挂载 -v /data/docker/tomcat/webapps:/usr/local/tomcat/webapps</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># logs 挂载：-v /data/docker/tomcat/logs:/usr/local/tomcat/logs </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># privileged 启动的容器，可以看到很多 host 上的设备，并且可以执行 mount</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># --privileged=true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">docker</span> run -it -d -p <span class=\"token number\">8080</span>:8080 -v /data/docker/tomcat/logs:/usr/local/tomcat/logs  -v /data/docker/tomcat/webapps:/usr/local/tomcat/webapps --name tomcat --privileged<span class=\"token operator\">=</span>true tomcat:8.5.59</pre></td></tr></table></figure><h3 id=\"nginx-2\"><a class=\"anchor\" href=\"#nginx-2\">#</a> Nginx</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 端口映射：-p 80:80</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 后台运行：-d</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 容器名：--name</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 配置文件挂载：-v /data/docker/nginx/nginx.conf:/etc/nginx/nginx.conf \\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 虚拟主机配置挂载：-v /data/docker/nginx/conf.d:/etc/nginx/conf.d \\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 证书文件挂载：-v /data/docker/nginx/cert:/etc/nginx/cert \\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 静态资源：-v /data/docker/nginx/html:/usr/share/nginx/html \\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 中文乱码：-e LANG=C.UTF-8 -e LC_ALL=C.UTF-8 \\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># privileged 启动的容器，可以看到很多 host 上的设备，并且可以执行 mount</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># --privileged=true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">docker</span> run -d -p <span class=\"token number\">80</span>:80 --name nginx <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> -v /data/docker/nginx/cert:/etc/nginx/cert <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> -v /data/docker/nginx/html:/usr/share/nginx/html <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> -v /data/docker/nginx/log:/var/log/nginx <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> -e <span class=\"token assign-left variable\"><span class=\"token environment constant\">LANG</span></span><span class=\"token operator\">=</span>C.UTF-8 -e <span class=\"token assign-left variable\"><span class=\"token environment constant\">LC_ALL</span></span><span class=\"token operator\">=</span>C.UTF-8 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> -v /data/docker/nginx/conf.d:/etc/nginx/conf.d <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> --privileged<span class=\"token operator\">=</span>true nginx</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#运行容器</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">docker</span> run -d -p <span class=\"token number\">80</span>:80 --name nginx nginx</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#进入容器查看需要挂载的文件</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> -it nginx /bin/bash</pre></td></tr></table></figure>",
            "tags": [
                "经验总结",
                "后端"
            ]
        },
        {
            "id": "https://windlinxy.top/2022/11/17/b73eedab4ef3/",
            "url": "https://windlinxy.top/2022/11/17/b73eedab4ef3/",
            "title": "NIO的一些问题",
            "date_published": "2022-11-17T09:51:34.000Z",
            "content_html": "<h1 id=\"nio存在的问题\"><a class=\"anchor\" href=\"#nio存在的问题\">#</a> NIO 存在的问题</h1>\n<p>在 NIO 中，若<strong> Selecto</strong>r 的轮询结果为空，也没有 <code>wakeup()</code>  或新消息处理，会发生空轮询导致 CPU 占用 100%。</p>\n<p><strong>前置知识：</strong></p>\n<p>JDK1.5 引入 <code>epoll</code>  机制。 <code>epoll</code>  是 linux2.6 内核的系统调用，设计目的就是替代 select、poll 线性复杂度的模型， <code>epoll</code>  的时间复杂度是 O (1)。 <code>epoll</code>  在高并发场景表现优秀。</p>\n<p><strong>文件描述符 (File Descriptor——fd)</strong>：linux 内核利用文件描述符来访问文件，打开显存文件或新建文件时，内核会返回一个文件描述符。读写文件也需要使用文件描述符来指定待读写的文件。</p>\n<p><strong>文件句柄</strong>：Windows 下的概念，句柄是各种对象的标识符，它是一个非负整数，也用于定位文件数据在内存中的位置。</p>\n<p>linux 下的文件描述符其实就相当于 windows 下的句柄。文件句柄只是 windows 众多句柄中的一种类型而已。</p>\n<p><strong>对于操作系统会有这样一个需求：如何在一个进程（线程）中处理多个文件，或者监听多个文件的 IO 事件。</strong></p>\n<p><code>select</code> 、 <code>poll</code>  和 <code>epoll</code>  都是操作系统中实现 IO 多路复用的方法。</p>\n<h2 id=\"select\"><a class=\"anchor\" href=\"#select\">#</a> select</h2>\n<p><code>select</code>  方法本质就是维护了一个文件描述符数组（32 位系统 MAX=1024,64 位 MAX=2048），依次实现 IO 多路复用，select 会监视文件描述符的变化。</p>\n<p><code>select()</code>  机制中提供了 <code>fd_set</code>  数据结构，实际上是一个 long 类型的数组，每个数组元素都能与以打开的文件描述符建立联系。</p>\n<p><code>/proc/sys/fs/file-max</code>  中<strong>指定了系统范围内所有进程可打开的文件的数量限制</strong></p>\n<p>当 <code>select</code>  方法被调用，首先需要将 <code>fd_set</code>  从用户空间拷贝到内核空间，然后内核用 <code>poll</code>  机制（非多路复用的 poll）返回一个 fd 准备就绪个数。方法返回后需要轮询 <code>fd_set</code> ，检查发生 IO 事件的 fd。</p>\n<p>缺陷：</p>\n<ul>\n<li>使用轮询，效率低。</li>\n<li>会导致用户空间和内核空间频繁拷贝数据。</li>\n</ul>\n<h2 id=\"poll\"><a class=\"anchor\" href=\"#poll\">#</a> poll</h2>\n<p><code>poll</code>  和 <code>select</code>  很类似，只不过 <code>poll</code>  维护的是一个链表，单个进程监听的 fd 不再有数量限制，但是和 <code>select</code>  相同的轮询和复制问题依然存在。</p>\n<h2 id=\"epoll\"><a class=\"anchor\" href=\"#epoll\">#</a> epoll</h2>\n<blockquote>\n<p>epoll 全称 EventPoll，是 linux 内核实现 IO 多路复用的模型。</p>\n</blockquote>\n<p>在 Linux 中， <code>selector</code>  和 <code>poll</code>  监听文件描述符 list，进行线性的查找，复杂度 O (n)。</p>\n<p><code>epoll</code>  使用了内核文件级别的回调机制，复杂度 O (1)。</p>\n<p>epoll 基于事件驱动，给每个 fd 注册一个回调函数，当对应的 fd 有 IO 事件发生时就调用这个回调函数，将这个 fd 放入一个链表中，这样客户端可以直接从链表中获得发生 IO 事件的 fd，从而达到 O (1) 级别的监听。</p>\n<p>epoll 有的三个系统调用：<em>epoll_create</em>, <em>epoll_ctl</em>, <em>epoll_wait</em></p>\n<h2 id=\"jdk中epoll的实现\"><a class=\"anchor\" href=\"#jdk中epoll的实现\">#</a> JDK 中 epoll 的实现</h2>\n<p>理论上无客户端连接时 <code>Selector.select()</code>  方法会阻塞，<strong>但空轮询 bug 导致：即使无客户端连接，NIO 照样不断的从 select 本应该阻塞的 <code>Selector.select()</code>  中 wake up 出来，导致 CPU100% 问题。</strong></p>\n",
            "tags": [
                "学习笔记",
                "Java"
            ]
        },
        {
            "id": "https://windlinxy.top/2022/11/16/32e7bb3553da/",
            "url": "https://windlinxy.top/2022/11/16/32e7bb3553da/",
            "title": "IO模型",
            "date_published": "2022-11-16T07:53:18.000Z",
            "content_html": "<h1 id=\"java-io模型\"><a class=\"anchor\" href=\"#java-io模型\">#</a> JAVA IO 模型</h1>\n<h2 id=\"bio\"><a class=\"anchor\" href=\"#bio\">#</a> BIO</h2>\n<p>Blocking IO，同步并阻塞方式，应用程序向 OS 请求网络 IO 操作，然后会等待 IO 操作完成。客户端与服务器端连接，一个连接创建一个线程。</p>\n<p><strong>适用于</strong>连接数目比较小且固定的架构，对服务器要求比较高</p>\n<p><strong>简单流程：</strong></p>\n<ol>\n<li>服务端启动一个 ServerSocket。</li>\n<li>客户端启动 Socket 对服务端通讯，默认情况下服务端对每个客户建立一个线程。</li>\n<li>客户端发送请求后，先检测服务端是否有线程响应，没有则等待或被拒绝。</li>\n<li>有响应，客户端线程等待请求结束返回响应，再继续执行。</li>\n</ol>\n<h2 id=\"nio\"><a class=\"anchor\" href=\"#nio\">#</a> NIO</h2>\n<p>Non-Blocking IO，同步非阻塞，一个线程处理多个请求，客户端发送的连接请求会注册到多路复用器上，多路复用器轮询到 IO 请求会处理</p>\n<p><strong>适用于</strong>连接数目多且连接比较短的架构，比如聊天服务器，弹幕系统，服务器间通讯。</p>\n<h3 id=\"selector-channel和buffer的关系\"><a class=\"anchor\" href=\"#selector-channel和buffer的关系\">#</a> Selector、Channel 和 Buffer 的关系</h3>\n<ul>\n<li>每个 Channel 都会对应一个 Buffer</li>\n<li>Selector 对应一个线程，一个线程对应多个 Channel</li>\n<li>程序切换到哪个 channel 是由事件决定的。</li>\n<li>Selector 会根据不同的事件在各个通道切换</li>\n<li>Buffer 就是一个内存块，底层有个数组</li>\n<li>数据的读取写入是通过 Buffer，可以双向读写，需要 filp 方法切换</li>\n<li>channel 是双向的，可以返回底层操作系统的情况，比如 Linux，底层操作系统的通道就是双向的</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/202211142010790.png\" alt=\"image-20221114201053624\" /></p>\n<h3 id=\"buffer\"><a class=\"anchor\" href=\"#buffer\">#</a> Buffer</h3>\n<p>Buffer 是一个抽象类，子类有：</p>\n<ul>\n<li>ByteBuffer</li>\n<li>CharBuffer</li>\n<li>ShortBuffer</li>\n<li>IntBuffer</li>\n<li>LongBuffer</li>\n<li>FloatBuffer</li>\n<li>DoubleBuffer</li>\n</ul>\n<p>在子类中有一个数组 hb 用于缓冲的实现。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Invariants: mark &lt;= position &lt;= limit &lt;= capacity</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 标记，调用 mark () 可以将 position 的值赋给 mark，reset () 恢复 position</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> mark <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 位置，下一个要读或写的偏移量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> position <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 缓冲区当前的终点，不能对大于 limit 的位置修改，limit 位置可以修改</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 容量，可容纳最大数据量，不可修改</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"channel\"><a class=\"anchor\" href=\"#channel\">#</a> Channel</h3>\n<ul>\n<li>通道可以同时进行读写</li>\n<li>通道可以实现异步读写数据</li>\n<li>通道可以从缓冲读，可以写到缓冲</li>\n</ul>\n<p>Channel 是一个接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Channel</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Closeable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>常用的 Channel 类有 FileChannel（文件读写）、DatagramChannel（UDP 数据读写）、ServerSocketChannel 和 SocketChannel（这俩 TCP 数据读写）</p>\n<p><strong>在各种 channel 所依托的流如果关闭其 <code>read()</code>  方法会返回 - 1，其余返回 0</strong></p>\n<h3 id=\"selector\"><a class=\"anchor\" href=\"#selector\">#</a> Selector</h3>\n<p>用一个线程处理多个客户端连接，就会用到选择器，Selector 可以检测多个注册的通道上是否有事件发生（多个 Channel 以事件的方式可以注册到同一个 Selector）</p>\n<p>只有在 连接 / 通道 真正有读写事件发生时，才会进行读写，大大减少了系统开销，避免了多线程上下文切换导致的开销。</p>\n<blockquote>\n<p>Selector 是一个抽象类，常用方法有</p>\n<ul>\n<li><code>open( )</code> ：得到一个选择器对象</li>\n<li><code>selectedKeys( )</code> ：获得内部集合所有等待 IO 操作的 selectionKey</li>\n<li><code>select(long timeout)</code> ：监控所有注册通道，当有 IO 操作发生时将对应的 SelectionKey 加入到内部集合并且返回，参数超时时间，超时返回有事件发生的 SelectionKey</li>\n<li><code>select()</code> ：阻塞直到注册的通道有事件到达，返回有事件发生的 SelectionKey</li>\n<li><code>selcetNow()</code> ：不阻塞，立马返回</li>\n<li><code>wakeuo()</code> ：唤醒 selector</li>\n<li><code>keys()</code> ：返回当前所有注册在 selector 中 channel 的 selectionKey</li>\n</ul>\n</blockquote>\n<p>一个 SelectionKey 表示了一个特定的 channel 通道对象和一个特定的 selector 选择器对象之间的注册关系。</p>\n<p>🛑<strong>SelectionKey 在被轮询后需要 remove ()，selector 不会自己删除 selectedKeys () 集合中的 selectionKey，如果不人工 remove ()，将导致下次 select () 的时候 selectedKeys () 中仍有上次轮询留下来的信息，这样必然会出现错误。</strong></p>\n<p>🛑<strong>注册过的 channel 信息会以 SelectionKey 的形式存储在 selector.keys () 中。keys () 中的成员是不需要被删除的 (以此来记录 channel 信息)。</strong></p>\n<h4 id=\"selectionkey\"><a class=\"anchor\" href=\"#selectionkey\">#</a> SelectionKey</h4>\n<p>SelectionKey 表示 Selector 与网络通道是注册关系</p>\n<h3 id=\"nio非阻塞网络编程\"><a class=\"anchor\" href=\"#nio非阻塞网络编程\">#</a> NIO 非阻塞网络编程</h3>\n<p>实现：</p>\n<ol>\n<li>\n<p>客户端连接时，会通过 ServerSocketChannel 得到 SocketChannel。</p>\n</li>\n<li>\n<p>将 SocketChannel 注册到 Selector 上， <code>register(Selector sel, int ops)</code> ，一个 Selector 可以注册多个 SocketChannel。</p>\n</li>\n<li>\n<p>注册后返回一个 SelectionKey。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 读事件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> OP_READ <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 写事件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> OP_WRITE <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 连接事件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> OP_CONNECT <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 接受连接事件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> OP_ACCEPT <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>Selector 进行监听， <code>select( )</code>  返回有事件发生的通道个数。</p>\n</li>\n<li>\n<p>进一步得到各个 SelectionKey。</p>\n</li>\n<li>\n<p>在通过 SelectionKey 反向获取 SocketChannel。</p>\n</li>\n<li>\n<p>通过得到的 Channel 完成处理。</p>\n</li>\n</ol>\n<p><strong>服务端实现</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"Server\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NIOServer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 创建选择器 (open 是一个工厂方法)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Selector</span> selector <span class=\"token operator\">=</span> <span class=\"token class-name\">Selector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 创建 ServerSocketChannel 绑定套接字</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">ServerSocketChannel</span> ssChannel <span class=\"token operator\">=</span> <span class=\"token class-name\">ServerSocketChannel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        ssChannel<span class=\"token punctuation\">.</span><span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InetSocketAddress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 设置非阻塞</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        ssChannel<span class=\"token punctuation\">.</span><span class=\"token function\">configureBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 将通道注册到选择器上，接受连接事件操作</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ssChannel<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">.</span>OP_ACCEPT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 循环监听</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 监听事件，会阻塞直到有至少一个事件到达</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            selector<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 获取到达的事件</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">></span></span> keys <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">selectedKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 使用迭代器遍历</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">></span></span> keyIterator <span class=\"token operator\">=</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>keyIterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token class-name\">SelectionKey</span> key <span class=\"token operator\">=</span> keyIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// 对应 OP_ACCEPT 通道事件，客户端连接先执行这个代码</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token class-name\">ServerSocketChannel</span> ssChannel1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerSocketChannel</span><span class=\"token punctuation\">)</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token comment\">// 服务器会为每个新连接创建一个 SocketChannel</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token class-name\">SocketChannel</span> sChannel <span class=\"token operator\">=</span> ssChannel1<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    sChannel<span class=\"token punctuation\">.</span><span class=\"token function\">configureBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socketChannel HashCode: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> sChannel<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token comment\">// 这个新连接主要用于从客户端读取数据</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    sChannel<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">.</span>OP_READ<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">isReadable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token comment\">//key 反向获取对应 Channel</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token class-name\">SocketChannel</span> sChannel <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketChannel</span><span class=\"token punctuation\">)</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token comment\">// 拿到之前放进去的 ByteBuffer</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token class-name\">ByteBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">)</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">attachment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    sChannel<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    <span class=\"token comment\">// 读写反转 limit=position，position = 0</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    buffer<span class=\"token punctuation\">.</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    sChannel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token comment\">// 从 SectionKeys 集合中移除当前已处理的 SelectionKey，重复操作</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                keyIterator<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>客户端实现</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"Client\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NiOClient</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//        Socket socket = new Socket(\"127.0.0.1\", 8888);</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//        OutputStream out = socket.getOutputStream();</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//        String s = \"hello world\";</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//        out.write(s.getBytes());</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//        out.close();</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">SocketChannel</span> socketChannel <span class=\"token operator\">=</span> <span class=\"token class-name\">SocketChannel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">configureBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">InetSocketAddress</span> inetSocketAddress <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InetSocketAddress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>inetSocketAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">finishConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"你好，啊\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 无需指定大小，直接就是你传进的 byte 数组大小</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">ByteBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"nio与零拷贝\"><a class=\"anchor\" href=\"#nio与零拷贝\">#</a> NIO 与零拷贝</h2>\n<h3 id=\"零拷贝\"><a class=\"anchor\" href=\"#零拷贝\">#</a> 零拷贝</h3>\n<p>这要从 Linux 说起：Linux 系统中一切皆文件，很多活动本质上都是读写操作。</p>\n<p>一般的数据拷贝过程：</p>\n<ol>\n<li>当应用程序读取磁盘数据时，调用 read ( ) 从用户态到内核态，该过程由 cpu 完成</li>\n<li>之后 CPU 发送 I/O 请求，磁盘收到请求后开始准备数据</li>\n<li>磁盘将数据传送到磁盘的缓冲区中，然后发送 I/O 中断</li>\n<li>CPU 收到中断后开始拷贝数据，然后由 read () 返回，再从内核态转换成用户态</li>\n</ol>\n<p>直接内存访问（Direct Memory Access）方式是一种硬件直接访问内存的一种方式：</p>\n<ul>\n<li>\n<p>读数据；</p>\n<ol>\n<li>调用 read () 函数，用户态切换内核态，状态切换一次；</li>\n<li>DMA 控制器将数据从磁盘拷贝到内核缓冲区，1 次 DMA 拷贝；</li>\n<li>CPU 将数据从内核缓冲区复制到用户缓冲区，1 次 CPU 拷贝；</li>\n<li>read () 函数返回，用户态切换回用户态，2 次状态切换；</li>\n</ol>\n</li>\n<li>\n<p>写数据；</p>\n<ol>\n<li>调用 write () 函数，用户态切换内核态，1 次切换；</li>\n<li>CPU 将用户缓冲区数据拷贝到内核缓冲区，1 次 CPU 拷贝；</li>\n<li>DMA 将数据从内核缓冲区复制到套接字的缓冲区，1 次 DMA 拷贝；</li>\n<li>write () 函数返回，内核态切换回用户态，2 次切换；</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>零拷贝是网络编程的关键，很多性能优化都离不开零拷贝</p>\n</blockquote>\n<p><strong>在 java 程序中，常用的零拷贝有 mmap（内存映射）和 sendFile</strong></p>\n<h3 id=\"mmap内存映射\"><a class=\"anchor\" href=\"#mmap内存映射\">#</a> mmap 内存映射</h3>\n<p>内存映射文件是 一种读写数据的方法，比常规的流或者通道读写要快，但是会有一些安全问题。</p>\n<p>内存映射文件是一个文件到一块内存的映射。使用内存映射文件处理存储于磁盘的文件时，不比对文件执行 IO 操作。在 Linux 中，mmap 实现了内核中读缓冲区域用户空间缓冲区的映射，从而实现二者的缓冲区共享。这样就减少了一次 cpu 拷贝。</p>\n<ol>\n<li>用户进程通过 <code>mmap()</code>  向操作系统内核发起 IO 调用，<strong>用户态切换为内核态</strong>。</li>\n<li>CPU 利用 DMA 控制器，把数据从硬盘中拷贝到内核缓冲区。</li>\n<li><strong>内核态切换回用户态</strong>， <code>write()</code>  返回。</li>\n<li>用户进程通过 <code>write()</code>  向操作系统内核发起 IO 调用，<strong>用户态切换为内核态</strong>。</li>\n<li>CPU 将内核缓冲区的数据拷贝到的 socket 缓冲区。</li>\n<li>CPU 利用 DMA 控制器，把数据从 socket 缓冲区拷贝到网卡，<strong>内核态切换回用户态</strong>，write 调用返回。</li>\n</ol>\n<p><strong>一次读 + 写 4 次上下文切换，3 次数据拷贝</strong></p>\n<p>MappedByteBuffer 类继承自 ByteBuffer，子类 DirectByteBuffer 内部维护了一个缓存数组偏移量 arrayBaseOffset</p>\n<p>FileChannel 提供了 <code>map()</code>  方法把文件映射到虚拟内存，可以整个文件映射，也可以分段映射</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">mappedByteBufferTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         * MappedByteBuffer 可让文件直接在内存（堆外内存）修改，操作系统不需要拷贝一次</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">RandomAccessFile</span> randomAccessFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomAccessFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rw\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">FileChannel</span> fileChannel <span class=\"token operator\">=</span> randomAccessFile<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// FileChannel.MapMode.READ_WRITE 读写模式</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 0 可以修改的起始位置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 映射到内存的大小，即将文件多少个字节映射到内存</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 可直接修改的范围是 0-5</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">MappedByteBuffer</span> mappedByteBuffer <span class=\"token operator\">=</span> fileChannel<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileChannel<span class=\"token punctuation\">.</span>MapMode</span><span class=\"token punctuation\">.</span>READ_WRITE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        mappedByteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token char\">'H'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        mappedByteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token char\">'H'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        mappedByteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token char\">'H'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        mappedByteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token char\">'H'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        mappedByteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token char\">'H'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        randomAccessFile<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"sendfile系统调用\"><a class=\"anchor\" href=\"#sendfile系统调用\">#</a> sendFile 系统调用</h3>\n<p>建立两个文件之间的传输通道</p>\n<ol>\n<li>用户进程发起 <code>sendfile系统调用</code> ，<strong>用户态到内核态</strong></li>\n<li>DMA 控制器，把数据从硬盘中拷贝到内核缓冲区。</li>\n<li>CPU 将读缓冲区中数据拷贝到 socket 缓冲区</li>\n<li>DMA 控制器，异步把数据从 socket 缓冲区拷贝到网卡，</li>\n<li><strong>内核态到回用户态</strong>， <code>sendfile调用</code> 返回。</li>\n</ol>\n<p><strong>2 次上下文切换，最少 3 次数据拷贝</strong></p>\n<h2 id=\"aio\"><a class=\"anchor\" href=\"#aio\">#</a> AIO</h2>\n<p>Asynchronous I/O，异步非阻塞，无论是客户端的连接请求还是读写请求都会异步执行， 由操作系统完成后回调通知服务端程序启动线程去处理</p>\n<p><strong>适用于</strong>连接数目多且连接比较长的架构，相册服务器</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\"><strong>BIO</strong></th>\n<th style=\"text-align:center\"><strong>NIO</strong></th>\n<th style=\"text-align:center\"><strong>AIO</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>IO 模型</strong></td>\n<td style=\"text-align:center\">同步阻塞</td>\n<td style=\"text-align:center\">同步非阻塞（多路复用）</td>\n<td style=\"text-align:center\">异步非阻塞</td>\n</tr>\n<tr>\n<td><strong>编程难度</strong></td>\n<td style=\"text-align:center\">简单</td>\n<td style=\"text-align:center\">复杂</td>\n<td style=\"text-align:center\">复杂</td>\n</tr>\n<tr>\n<td><strong>可靠性</strong></td>\n<td style=\"text-align:center\">差</td>\n<td style=\"text-align:center\">好</td>\n<td style=\"text-align:center\">好</td>\n</tr>\n<tr>\n<td><strong>吞吐量</strong></td>\n<td style=\"text-align:center\">低</td>\n<td style=\"text-align:center\">高</td>\n<td style=\"text-align:center\">高</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "学习笔记",
                "后端",
                "Java"
            ]
        },
        {
            "id": "https://windlinxy.top/2022/10/04/8787e59dc4ea/",
            "url": "https://windlinxy.top/2022/10/04/8787e59dc4ea/",
            "title": "JUC:线程与进程",
            "date_published": "2022-10-04T13:39:19.000Z",
            "content_html": "<h1 id=\"进程与线程\"><a class=\"anchor\" href=\"#进程与线程\">#</a> 进程与线程</h1>\n<h2 id=\"进程\"><a class=\"anchor\" href=\"#进程\">#</a> 进程</h2>\n<ul>\n<li>程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载到内存。在指令运行过程中还需要用到磁盘，网络设备。进程就是用来加载指令、管理内存、管理 io 的</li>\n<li>当一个程序被运行，从磁盘加载这个程序的代码至内存，这是就开启了一个进程。</li>\n<li>进程就可以视为程序的一个实例。大部分程序可以同时运行多个实例进程</li>\n</ul>\n<h2 id=\"线程\"><a class=\"anchor\" href=\"#线程\">#</a> 线程</h2>\n<ul>\n<li>一个进程之内可以分为一到多个线程。</li>\n<li>一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 cpu 执行。</li>\n<li>Java 中，线程作为最小调度单位，进程作为资源分配的最小单位。在 windows 中进程是不活动的，只是作为线程的容器。</li>\n</ul>\n<p><strong>二者对比</strong></p>\n<ul>\n<li>\n<p>进程基本上相互独立，而线程存在于进程内，是进程的一个子集。</p>\n</li>\n<li>\n<p>进程拥有共享的资源，如内存空间</p>\n</li>\n<li>\n<p>进程间通信较为复杂</p>\n<ul>\n<li>同一台计算机 的进程通信称为 IPC（Inter-process Communication）</li>\n<li>不同计算机之间的进程通信，需要通过网络，并遵守共同的协议，例如 HTTP</li>\n</ul>\n</li>\n<li>\n<p>线程通信相对简单，因为它们共享进程内的内存，一个例子是多个线程可以访问同一个共享变量</p>\n</li>\n<li>\n<p>线程更加轻量，线程上下文切换成本一般要比进程上下文切换低</p>\n</li>\n</ul>\n<h2 id=\"应用\"><a class=\"anchor\" href=\"#应用\">#</a> 应用</h2>\n<h3 id=\"异步调用\"><a class=\"anchor\" href=\"#异步调用\">#</a> 异步调用</h3>\n<ul>\n<li>需要等待结果返回才能继续运行就是同步</li>\n<li>不需要等待结果返回，就能继续运行就是异步</li>\n</ul>\n<p><strong>注意：同步在多线程还有一层意思，即让多个线程步调一致</strong></p>\n<p>多线程可以让方法的执行变为异步，例如读取磁盘文件，可以单独创建一个线程进行，不至于等待其完成再顺序执行</p>\n<p>tomcat 的异步也是类似的目的，让用户线程处理耗时较长的操作，避免阻塞 tomcat 的工作线程</p>\n<h2 id=\"线程-2\"><a class=\"anchor\" href=\"#线程-2\">#</a> 线程</h2>\n<h3 id=\"创建\"><a class=\"anchor\" href=\"#创建\">#</a> 创建</h3>\n<p>方法 1：直接使用 Thread</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建线程对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 要执行的任务</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// \t启动线程</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 构造方法的参数是给线程指定名字，推荐</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//run 方法内实现了要执行的任务</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>t1<span class=\"token punctuation\">.</span><span class=\"token function\">strat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>方法 2：使用 Runnable 配合 Thread</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"miaomiao--\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>方法 3：FutureTask 配合 Thread</p>\n<p>FutureTask 能够接收 Callable 类型的参数，用来处理有返回结果的情况</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建任务对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 参数 1 任务对象，参数 2 线程名字</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> <span class=\"token string\">\"t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 主线程阻塞，同步等待 task 执行完毕的结果</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">Integer</span> result <span class=\"token operator\">=</span> task<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"结果是:&#123;&#125;\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"thread与runnable的关系\"><a class=\"anchor\" href=\"#thread与runnable的关系\">#</a> Thread 与 Runnable 的关系</h3>\n<ul>\n<li>方法 1 是把线程和任务合并在一起，方法 2 是把线程和任务分开</li>\n<li>用 Runnable 更容易与线程池高级 API 配合</li>\n<li>用 Runnable 让任务类脱离了 Thread 继承体系，更灵活</li>\n</ul>\n<h3 id=\"查看进程线程的方法\"><a class=\"anchor\" href=\"#查看进程线程的方法\">#</a> 查看进程线程的方法</h3>\n<p><strong>windows</strong></p>\n<ul>\n<li><code>tasklist</code></li>\n<li><code>taskkill</code></li>\n</ul>\n<p>Linux</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>- <span class=\"token function\">ps</span> -fe</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>- <span class=\"token function\">ps</span> -fT -p <span class=\"token operator\">&lt;</span>PID<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">kill</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">top</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">top</span> -H -p <span class=\"token operator\">&lt;</span>PID<span class=\"token operator\">></span></pre></td></tr></table></figure><p>JAVA</p>\n<ul>\n<li>jps 命令查看所有 java 进程</li>\n<li>jstack &lt;PID&gt; 查看某个 Java 进程 (PID)  的所有状态</li>\n<li>Jconsole 查看 java 进程运行情况</li>\n</ul>\n<h3 id=\"jconsole连接远程监控\"><a class=\"anchor\" href=\"#jconsole连接远程监控\">#</a> Jconsole 连接远程监控</h3>\n<p>需要以如下方式运行你的 java 类</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>java -Djava.rmi.server.hostname<span class=\"token operator\">=</span><span class=\"token string\">'ip地址'</span> -Dcom.sun.management.jmxremote.ssl<span class=\"token operator\">=</span>是否安全连接 -Dcom.sun.management.jmxremote.authenticate<span class=\"token operator\">=</span>是否认证 java类</pre></td></tr></table></figure><ul>\n<li>修改 /etc/hosts 文件将 127.0.0.1 映射至主机名</li>\n</ul>\n<p>如果要认证访问，还需要做如下步骤</p>\n<ul>\n<li>复制 jmxremote.password 文件</li>\n<li>修改 jmxremote.password 和 jmxremote.access 文件的权限为 600 即文件所有者可以读写</li>\n</ul>\n<h2 id=\"原理与线程运行\"><a class=\"anchor\" href=\"#原理与线程运行\">#</a> 原理与线程运行</h2>\n<h3 id=\"栈与栈帧\"><a class=\"anchor\" href=\"#栈与栈帧\">#</a> 栈与栈帧</h3>\n<p>JVM 由堆、栈、方法区所组成，栈内存给线程使用，每个线程启动后，虚拟机就会为其分配一块栈内存。</p>\n<ul>\n<li>每个栈由多个栈帧组成，对应着每次方法调用时所占用的内存</li>\n<li>每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法</li>\n</ul>\n<h3 id=\"线程上下文切换thread-context-switch\"><a class=\"anchor\" href=\"#线程上下文切换thread-context-switch\">#</a> 线程上下文切换（Thread Context Switch）</h3>\n<p>因为以下一些原因导致 cpu 不再执行当前的进程，转而执行另一个线程的代码</p>\n<ul>\n<li>线程的 cpu 时间片用完</li>\n<li>垃圾回收</li>\n<li>有更高优先级的线程需要执行</li>\n<li>线程自己调用 sleep、yield、wait、join、park、synchronized、lock 等方法 chengxu</li>\n</ul>\n<p>当 Context Switch 发生时，需要操作系统来保存当前线程的状态，并恢复另一个线程的状态，Java 中对应的概念就是程序计数器，它的作用就是记住下一条 jvm 指令的执行地址，是线程私有的</p>\n<h3 id=\"常用方法\"><a class=\"anchor\" href=\"#常用方法\">#</a> 常用方法</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/202210040949939.png\" alt=\"image-20221004094936815\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/202210040957520.png\" alt=\"image-20221004095700430\" /></p>\n<h4 id=\"sleep\"><a class=\"anchor\" href=\"#sleep\">#</a> sleep</h4>\n<ol>\n<li>调用 sleep 会让当前线程从 running 进入 Timed Waiting 状态</li>\n<li>其他线程可以使用 interrupt 方法打断正在睡眠的线程，这时线程会抛出 InterruptedException 异常</li>\n<li>睡眠结束后的线程未必会立刻得到执行</li>\n<li>建议使用 TimeUnit 的 sleep 代替 Tread 的 sleep 来获得更好的可读性</li>\n</ol>\n<h4 id=\"yield\"><a class=\"anchor\" href=\"#yield\">#</a> yield</h4>\n<ol>\n<li>调用 yield 方法会让当前线程从 running 转到 runnable 状态，然后调度执行其他同优先级的线程。如果当前没有同优先级的线程，不能保证让当前线程暂停的效果。</li>\n<li>具体操作依赖于操作系统任务调度器</li>\n</ol>\n<h4 id=\"线程优先级\"><a class=\"anchor\" href=\"#线程优先级\">#</a> 线程优先级</h4>\n<ul>\n<li>线程优先级会提示调度器优先调度该线程，但它仅仅是一个提示，调度器可以忽略它</li>\n<li>如果 cpu 很忙，那么优先级高的线程会获得更多的时间片，但 cpu 闲时，优先级几乎没作用。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    log<span class=\"token punctuation\">.</span><span class=\"token function\">dubug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"priority is &#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Thread</span>。<span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProiority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"案例防止cpu占用100\"><a class=\"anchor\" href=\"#案例防止cpu占用100\">#</a> 案例：防止 cpu 占用 100%</h4>\n<h5 id=\"sleep实现\"><a class=\"anchor\" href=\"#sleep实现\">#</a> sleep 实现</h5>\n<p>在没有利用 cpu 计算时，while (true) 空转会浪费 cpu，这时可以使用 yield 或 sleep 来让 cpu 的使用权给其他程序</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterrupterdException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>可以用 wait  或条件变量达到类似效果</li>\n<li>不同的是，后者需要加锁，并且需要相应的唤醒操作，一般适用于要进行同步的场景</li>\n<li>sleep 适用于无需同步的场景</li>\n</ul>\n<h4 id=\"join\"><a class=\"anchor\" href=\"#join\">#</a> join</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                r <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wake up\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125;\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果为 r=0</p>\n<p>这是因为主线程在 r 复制之前就执行了日志打印，等待 t1 执行完需要调用 <code>t1.join()</code> （启动 t1 之后）</p>\n<h4 id=\"应用同步\"><a class=\"anchor\" href=\"#应用同步\">#</a> 应用同步</h4>\n<p>从调用方的角度讲：</p>\n<ul>\n<li>需要等待结果返回，才能继续执行的是同步</li>\n<li>不需要等待结果返回，就能继续执行的是异步</li>\n</ul>\n<p>sleep、join、wait 被打断后会清除打断标记，也就是打断标记不会为真值</p>\n<h2 id=\"模式之两阶段终止模式\"><a class=\"anchor\" href=\"#模式之两阶段终止模式\">#</a> 模式之两阶段终止模式 *</h2>\n<p>在一个线程 T1 中如何优雅终止线程 T2</p>\n<p><strong>错误思路</strong>：</p>\n<ul>\n<li>使用 stop（）方法停止线程\n<ul>\n<li>stop 方法会真正杀死线程，如果这时线程锁住了共享资源，那么它被杀死后就再也没有机会释放锁，其他线程将永远无法获取锁。</li>\n</ul>\n</li>\n<li>使用 System.exit (ini) 方法停止线程\n<ul>\n<li>目的仅仅是停止一个线程，但会让整个程序停止运行。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> TD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    w<span class=\"token text string\">(\"while(true)\")</span> <span class=\"token arrow operator\">--></span> a</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    a<span class=\"token text string\">(\"有没有被打断\")</span><span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span> <span class=\"token label property\">是</span> <span class=\"token arrow operator\">--></span></span> b<span class=\"token text string\">(\"料理后事\")</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    b <span class=\"token arrow operator\">--></span> c<span class=\"token text string\">((\"结束循环\"))</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    a <span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span><span class=\"token label property\">否</span><span class=\"token arrow operator\">--></span></span> d<span class=\"token text string\">(\"睡眠2s\")</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    d <span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span><span class=\"token label property\">有异常</span><span class=\"token arrow operator\">--></span></span>i<span class=\"token text string\">(设置打断标记)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    d <span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span><span class=\"token label property\">无异常</span><span class=\"token arrow operator\">--></span></span>e<span class=\"token text string\">(执行监控记录)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    i <span class=\"token arrow operator\">--></span> w</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    e <span class=\"token arrow operator\">--></span> w</pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"TwoPhaseTermination\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TwoPhaseTermination</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Thread</span> monitor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 启动监控线程</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        monitor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token class-name\">Thread</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"得，料理后事\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行监控记录\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"睡眠时打断\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token comment\">// 设置打断标记</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//                    current.interrupt();</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        monitor<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        monitor<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 执行</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">TwoPhaseTermination</span> tpt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TwoPhaseTermination</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        tpt<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        tpt<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"关于park和interrupted方法\"><a class=\"anchor\" href=\"#关于park和interrupted方法\">#</a> 关于 park () 和 interrupted () 方法</h3>\n<p>park () 方法会使的未被打断的线程（或打断标记为 false）阻塞，当线程再次被打断时（打断标记为 true）继续运行。</p>\n<p>interrupted () 方法会打断线程并且清除打断标记（置 false）</p>\n<h3 id=\"不推荐方法\"><a class=\"anchor\" href=\"#不推荐方法\">#</a> 不推荐方法：</h3>\n<p><strong>理由：方法过时，容易破坏同步代码块，造成线程死锁</strong></p>\n<ul>\n<li>stop ( ) 停止线程</li>\n<li>suspend ( ) 挂起线程</li>\n<li>resume ( ) 恢复线程运行</li>\n</ul>\n<h2 id=\"主线程与守护线程\"><a class=\"anchor\" href=\"#主线程与守护线程\">#</a> 主线程与守护线程</h2>\n<p>默认情况下，java 进程需要等待所有线程都结束才会结束。有一种特殊的线程叫做守护线程，只要其它非守护线程运行结束，即使守护线程的代码没执行完，也会强制结束。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">setDaemon</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"结束1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>垃圾回收线程就是一个守护线程</li>\n<li>tomcat 中的 Acceptor 和 Poller 线程都是守护线程，所以 Tomcat 接收到 Shutdown 命令后，不会等待它们处理完请求</li>\n</ul>\n<h2 id=\"线程的六个状态\"><a class=\"anchor\" href=\"#线程的六个状态\">#</a> 线程的六个状态</h2>\n<blockquote>\n<p>在 Thead 的内部枚举类 State 定义了线程的六个状态：</p>\n<blockquote>\n<p>&lt;span style=&quot;color:red&quot;&gt;NEW&lt;/span&gt;（尚未启动的线程处于此状态，创建为调用 <code>start()</code>  方法）</p>\n</blockquote>\n<blockquote>\n<p>&lt;span style=&quot;color:red&quot;&gt;RUNNABLE&lt;/span&gt;（在 Java 虚拟机执行的线程处于此状态 | 操作系统层面的可运行、阻塞、运行都是此状态）</p>\n</blockquote>\n<blockquote>\n<p>&lt;span style=&quot;color:red&quot;&gt;BLOCKED&lt;/span&gt;（被阻塞等待监视器锁定的线程处于此状态）</p>\n</blockquote>\n<blockquote>\n<p>&lt;span style=&quot;color:red&quot;&gt;WAITING&lt;/span&gt;（正在等待另一个线程执行特定动作的线程处于此状态）</p>\n</blockquote>\n<blockquote>\n<p>&lt;span style=&quot;color:red&quot;&gt;TIMED_WAITING&lt;/span&gt;（正在等待另一个线程执行动作达到指定等待时间的线程处于此状态）</p>\n</blockquote>\n<blockquote>\n<p>&lt;span style=&quot;color:red&quot;&gt;TERMINATED&lt;/span&gt;（已退出的线程处于此状态）</p>\n</blockquote>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/202210042139039.png\" alt=\"img\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span><span class=\"token punctuation\">(</span>topic <span class=\"token operator\">=</span> <span class=\"token string\">\"ThreadState\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadState</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadState</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        t4<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                t2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        t5<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t6 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadState</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        t6<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1 state:&#123;&#125;\"</span><span class=\"token punctuation\">,</span> t1<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2 state:&#123;&#125;\"</span><span class=\"token punctuation\">,</span> t2<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t3 state:&#123;&#125;\"</span><span class=\"token punctuation\">,</span> t3<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t4 state:&#123;&#125;\"</span><span class=\"token punctuation\">,</span> t4<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t5 state:&#123;&#125;\"</span><span class=\"token punctuation\">,</span> t5<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t6 state:&#123;&#125;\"</span><span class=\"token punctuation\">,</span> t6<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">21</span>:25:24 <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> ThreadState - t1 state:NEW</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">21</span>:25:24 <span class=\"token punctuation\">[</span>t3<span class=\"token punctuation\">]</span> ThreadState - running</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">21</span>:25:24 <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> ThreadState - t2 state:RUNNABLE</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">21</span>:25:24 <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> ThreadState - t3 state:TERMINATED</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">21</span>:25:24 <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> ThreadState - t4 state:TIMED_WAITING</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">21</span>:25:24 <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> ThreadState - t5 state:WAITING</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">21</span>:25:24 <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> ThreadState - t6 state:BLOCKED</pre></td></tr></table></figure><h2 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h2>\n<ul>\n<li>线程创建\n<ul>\n<li>线程重要 api， <code>start</code> ， <code>run</code> ， <code>sleep</code> ， <code>join</code> ， <code>interrupt</code>  等</li>\n<li>线程六个状态</li>\n<li>应用方面\n<ul>\n<li>异步调用</li>\n<li>提高效率</li>\n<li>同步等待</li>\n<li>统筹规划</li>\n</ul>\n</li>\n<li>原理方面\n<ul>\n<li>线程运行流程：栈、栈帧、上下文切换、程序计数器</li>\n<li>Thread 两种创建方式的源码</li>\n</ul>\n</li>\n<li>模式方面\n<ul>\n<li>两阶段终止模式</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "学习笔记",
                "后端",
                "多线程框架"
            ]
        },
        {
            "id": "https://windlinxy.top/2022/06/30/712cede46373/",
            "url": "https://windlinxy.top/2022/06/30/712cede46373/",
            "title": "RabbitMQ学习_02",
            "date_published": "2022-06-30T01:15:19.000Z",
            "content_html": "<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<h2 id=\"rpm包安装\"><a class=\"anchor\" href=\"#rpm包安装\">#</a> rpm 包安装</h2>\n<ol>\n<li>\n<p>官网地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2Rvd25sb2FkLmh0bWw=\">https://www.rabbitmq.com/download.html</span></p>\n</li>\n<li>\n<p>下载 rpm 文件：这里有两个需要下载，分别是 rabbitmq-server 和 erlang</p>\n</li>\n<li>\n<p>安装文件：</p>\n<ul>\n<li>\n<p>erlang-23.3.4.11-1.el7.x86_64.rpm</p>\n</li>\n<li>\n<p>rabbitmq-server-3.10.5-1.el8.noarch.rpm</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 需要的环境</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rpm</span> -ivh erlang-23.3.4.11-1.el7.x86_64.rpm</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 依赖包，要联网</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>yum <span class=\"token function\">install</span> socat -y</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 本身</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">rpm</span> -ivh rabbitmq-server-3.10.5-1.el8.noarch.rpm</pre></td></tr></table></figure></li>\n<li>\n<p>常用命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 开机启动 RabbitMQ 服务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">chkconfig</span> rabbitmq-server on</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 启动服务</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>/sbin/service rabbitmq-server start </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 查看服务状态</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>/sbin/service rabbitmq-server status</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 停止服务状态</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>/sbin/service rabbitmq-server stop</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 开启 web 管理插件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>rabbitmq-plugins <span class=\"token builtin class-name\">enable</span> rabbitmq_management</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 开启</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/image-20220627173744214.png\" alt=\"image-20220627173744214\" /></p>\n</li>\n<li>\n<p>添加新用户</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 创建账号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rabbitmqctl add_user admin <span class=\"token number\">123</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 设置用户角色</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>rabbitmqctl set_user_tags admin administrator</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 设置用户权限 set_permissions [-p &lt;vhostpath>] &lt;user> &lt;conf> &lt;write> &lt;read></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>rabbitmqctl set_permissions -p <span class=\"token string\">\"/\"</span> admin <span class=\"token string\">\".*\"</span> <span class=\"token string\">\".*\"</span> <span class=\"token string\">\".*\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 用户 user_admin 具有 /vhost1 这个 virtual host 中所有资源的配置、写、读权限</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 当前用户和角色</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>rabbitmqctl list_users</pre></td></tr></table></figure></li>\n<li>\n<p>用户登录</p>\n</li>\n<li>\n<p>重置命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 关闭应用命令</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rabbitmqctl stop_app</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 清除命令</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>rabbitmqctl reset</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 重新启动</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>rabbitmqctl start_app</pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"docker安装\"><a class=\"anchor\" href=\"#docker安装\">#</a> Docker 安装</h2>\n<h3 id=\"获取rabbit镜像\"><a class=\"anchor\" href=\"#获取rabbit镜像\">#</a> 获取 rabbit 镜像</h3>\n<pre><code>docker pull rabbitmq:management\n</code></pre>\n<h3 id=\"创建并运行容器\"><a class=\"anchor\" href=\"#创建并运行容器\">#</a> 创建并运行容器</h3>\n<pre><code>docker run -di --name=myrabbit -p 15672:15672 rabbitmq:management\n</code></pre>\n<p>—hostname：指定容器主机名称<br />\n —name：指定容器名称<br />\n - p：将 mq 端口号映射到本地<br />\n或者运行时设置用户和密码</p>\n<pre><code>docker run -di --name myrabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 -p 25672:25672 -p 61613:61613 -p 1883:1883 rabbitmq:management\n</code></pre>\n<h3 id=\"查看日志\"><a class=\"anchor\" href=\"#查看日志\">#</a> 查看日志</h3>\n<pre><code>docker logs -f myrabbit\n</code></pre>\n<h3 id=\"容器运行正常\"><a class=\"anchor\" href=\"#容器运行正常\">#</a> 容器运行正常</h3>\n<p>使用 <span class=\"exturl\" data-url=\"aHR0cDovL3huLS1pcC0wcDNjazAxYWtjdTQxdjoxNTY3Mi8=\">http:// 你的 IP 地址：15672</span> 访问 rabbit 控制台</p>\n<h3 id=\"额外linux相关排查命令\"><a class=\"anchor\" href=\"#额外linux相关排查命令\">#</a> 额外 Linux 相关排查命令</h3>\n<pre><code>&gt; more xxx.log  查看日记信息&gt; netstat -naop | grep 5672 查看端口是否被占用&gt; ps -ef | grep 5672  查看进程&gt; systemctl stop 服务\n</code></pre>\n<h1 id=\"简单实践\"><a class=\"anchor\" href=\"#简单实践\">#</a> 简单实践</h1>\n<p>采用简单模式进行代码实践</p>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/202206300906262.png\" alt=\"image-20220630083249319\" /></p>\n<p>生产者 Producer</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>windlinxy<span class=\"token punctuation\">.</span>pqc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Channel</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span>charset<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeoutException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @author Windlinxy</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @description 生产者</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @date 2022-06-28 15:45</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Producer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 队列名称</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> QUEUE_NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 发消息</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * @param args 参数</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeoutException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 创建工厂</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 工厂 ip 连接 RabbitMQ 的队列</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器ip\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 创建连接</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 连接中创建信道（具体看原理图）</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 简单连接，忽略交换机，连接队列</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>         * 生成一个队列</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>         * 1. 队列名称</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>         * 2. 队列里的消息是否持久化（磁盘） 默认情况是存到内存（false）、</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>         * 3. 该队列是否只供一个消费者进行消费，是否消息共享，默认是 false</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>         * 4. 最后一个消费者断开了连接之后，是否自动删除</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>         * */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span>QUEUE_NAME<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">// 准备发消息</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">/*       * 发送</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>         * 1. 发送到哪个交换机</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>         * 2. 路由的 Key 值是哪个，本次是队列的名称</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>         * 3. 其他参数信息</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>         * 4。 发送消息体 */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> QUEUE_NAME<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span>UTF_8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Success!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>消费者 Consumer</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>windlinxy<span class=\"token punctuation\">.</span>pqc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @author Windlinxy</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @description 消费者</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @date 2022-06-28 15:45</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> QUEUE_NAME <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器ip\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"等待接收消息.........\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 推送的消息如何进行消费的接口回调</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span>Consumer</span> consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            回调方法</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            1. consumerTag 标识</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            2. envelope 获取一些信息，交换机，路由 key</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            3. properties 配置信息</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            4. body 数据</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AMQP<span class=\"token punctuation\">.</span>BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"consumerTag ：\"</span> <span class=\"token operator\">+</span> consumerTag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exchange ： \"</span><span class=\"token operator\">+</span>envelope<span class=\"token punctuation\">.</span><span class=\"token function\">getExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RoutingKey ： \"</span><span class=\"token operator\">+</span>envelope<span class=\"token punctuation\">.</span><span class=\"token function\">getRoutingKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">//                System.out.println(\"properties ： \" + properties);</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body ： \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        高级用法</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        DeliverCallback deliverCallback = (consumerTag, delivery) -> &#123;</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            String message = new String (delivery.getBody ());</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            System.out.println (message);</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        &#125;;</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        // 取消消费的一个回调接口 如在消费的时候队列被删除掉了</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        CancelCallback cancelCallback = (consumerTag) -> &#123;</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            System.out.println (\"消息消费被中断\");</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        &#125;;</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>         * 消费者消费消息</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>         * 1. 消费哪个队列</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>         * 2. 消费成功之后是否要自动应答 true 代表自动应答 false 手动应答</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>         * 3. 消费者未成功消费的回调</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>QUEUE_NAME<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> consumer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">// 消费者是监听消息，不要去关闭资源</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/image-20220630091648283.png\" alt=\"image-20220630091648283\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/image-20220630091704270.png\" alt=\"image-20220630091704270\" /></p>\n",
            "tags": [
                "学习笔记",
                "后端",
                "消息队列"
            ]
        },
        {
            "id": "https://windlinxy.top/2022/06/27/4318463f9256/",
            "url": "https://windlinxy.top/2022/06/27/4318463f9256/",
            "title": "RabbitMQ学习_01",
            "date_published": "2022-06-27T09:19:23.000Z",
            "content_html": "<h1 id=\"相关概念\"><a class=\"anchor\" href=\"#相关概念\">#</a> 相关概念</h1>\n<h2 id=\"什么是mq\"><a class=\"anchor\" href=\"#什么是mq\">#</a> 什么是 MQ</h2>\n<p>message queue 消息的队列，本质上是队列，FIFO 先进先出，队列存放的内容是消息，还是一种跨进程的通信机制，用于上下游传递消息（比喻：QQ 上 A 发消息给 B，A 是上游，B 是下游），逻辑解耦和物理解耦，使用了 MQ 之后，消息发送上游只依赖 MQ，不需要依赖其他服务。</p>\n<h2 id=\"为什么要用mqmq三大特点\"><a class=\"anchor\" href=\"#为什么要用mqmq三大特点\">#</a> 为什么要用 MQ？MQ 三大特点</h2>\n<h3 id=\"流量消峰\"><a class=\"anchor\" href=\"#流量消峰\">#</a> 流量消峰</h3>\n<p>举例子：订单系统最多能处理一万次订单，这个处理能力应付正常时段的下单绰绰有余，正常我们下单一秒就能返回结果，但是在高峰期，如果两万次下单操作系统是处理不了的，只能限制订单超出一万次后不允许用户下单。而使用功能消息队列做缓冲，我们可以取消这个限制，把一秒内下的订单分散成一段时间来处理，这是有些用户可能在下单十几秒后才收到下单成功的操作，但是比不能下单的体验要好。</p>\n<h3 id=\"应用解耦\"><a class=\"anchor\" href=\"#应用解耦\">#</a> 应用解耦</h3>\n<p>举例子：以电商应用为例，应用中有订单系统、库存系统、物流系统、支付系统、用户创建订单后，如果耦合调用库存系统，物流系统，支付系统，任何一个子系统出了故障，都会造成下单操作异常。当转变成基于消息队列的方式后，系统间调用的问题会少很多，比如物流系统发生了故障，需要几分钟来修复，在这几分钟的时间里，物流系统要处理的内存被缓存在消息队列里，用户下单操作可以正常完成。当物流系统恢复后，急需处理订单即可，用户感受不到物流系统的故障，提升系统的可用性。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/image-20220627152327281.png\" alt=\"image-20220627152327281\" /></p>\n<h3 id=\"异步处理\"><a class=\"anchor\" href=\"#异步处理\">#</a> 异步处理</h3>\n<p>A 要调用 B，并且要时不时发消息询问 B 是否处理完毕。使用消息队列，A 调用 B 之后 A 干自己的事情，B 处理完成后发送处理完毕消息给消息队列，消息队列将消息发送给 A</p>\n<h2 id=\"mq的分类\"><a class=\"anchor\" href=\"#mq的分类\">#</a> MQ 的分类</h2>\n<h3 id=\"activemq\"><a class=\"anchor\" href=\"#activemq\">#</a> ActiveMQ</h3>\n<ul>\n<li>优点：单机吞吐量万级，时效性 ms 级，可用性高，基于主从架构实现高可用性，消息可靠性：较低概率丢失数据</li>\n<li>缺点：官方社区维护越来越少，高吞吐量使用场景少</li>\n</ul>\n<h3 id=\"kafka\"><a class=\"anchor\" href=\"#kafka\">#</a> Kafka</h3>\n<p>大数据杀手锏，谈到大数据领域内的消息传输，绕不开 Kafka，为大数据而生的消息中间件，百万级 TPS（服务器每秒处理事物数）吞吐量，在数据采集、传输、存储过程中发挥举足轻重的作用，目前已被 LinkedIn，Uber，Twitter，Netflix 等大公司所采纳</p>\n<ul>\n<li>优点：性能卓越，单机写入 TPS 约百万条 / 秒，吞吐量高，时效性 ms 级可用性非常高，kafka 是分布式的，一个数据多个副本，少数机器宕机不会丢失数据，不会导致不可用，消费者采用 pull 方式获取消息，消息有序，通过控制能够保证所有的消息被消费且仅被消费一次；有优秀的第三方 kafkaWeb 的管理界面 Kafka-Manager；在日志领域比较成熟，被多家公司和多个开源项目使用，功能支持较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用。</li>\n<li>缺点：Kafka 单机超过 64 个队列 / 分区，Load 会发生明显的飙高现象，队列越多，load 越高，发送消息响应时间变长，使用短轮询方式，实时性取决于轮询间隔时间，消费失败不支持重试；支持消息顺序，但是有一台代理宕机后，会产生消息乱序，社区更新较慢</li>\n</ul>\n<h3 id=\"rocketmq\"><a class=\"anchor\" href=\"#rocketmq\">#</a> RocketMQ</h3>\n<p>出自阿里巴巴开源产品，用 Java 语言实现，在设计时参考了 kafka，并做出了一些改进，被阿里巴巴广泛应用在订单、交易、充值、流计算、消息推送、日志流氏处理、binglog 分发等场景</p>\n<ul>\n<li>优点： 单机吞吐量十万级，可用性非常高，分布式架构，消息可以做到 0 丢失，MQ 功能较为完善，还是分布式的，扩展性好，支持 10 亿级别的消息堆积，不会因为堆积导致性能下降，源码是 Java 我们可以自己阅读源码，定制自己公司的 MQ</li>\n<li>缺点：支持的客户端语言不多，目前是 java 以及 C++，C++ 不成熟，社区活跃度一般，没有在 MQ 核心中区实现 JMS 等接口，有些系统要迁移需要修改大量代码</li>\n</ul>\n<h3 id=\"rabbitmq\"><a class=\"anchor\" href=\"#rabbitmq\">#</a> RabbitMQ</h3>\n<p>2007 年发布，是一个在 AMQP（高级消息队列协议）基础上完成的，可复用的企业消息系统，是当前最主流的中间件之一。</p>\n<ul>\n<li>优点：由于 erlang 语言的高并发特点，性能较好；吞吐量到万级，MQ 功能比较完备，健壮、稳定、易用、跨平台，支持多种语言：Python、Ruby、.NET、Java、JMS、C、PHP 等，支持 AJAX，文档齐全；开源提供的管理界面非常棒，用起来很好用，社区活跃度高，更新频率相当高</li>\n<li>缺点：商业版收费，学习成本高。</li>\n</ul>\n<h2 id=\"mq的选择\"><a class=\"anchor\" href=\"#mq的选择\">#</a> MQ 的选择</h2>\n<h3 id=\"kafka-2\"><a class=\"anchor\" href=\"#kafka-2\">#</a> Kafka</h3>\n<p>Kafka 适合产生大量数据的互联网服务的数据收集业务，大型公司，如果有日志采集，首选 Kafka</p>\n<h3 id=\"rocketmq-2\"><a class=\"anchor\" href=\"#rocketmq-2\">#</a> RocketMQ</h3>\n<p>适合金融互联网领域，对于可靠性要求很高的场景，业务上有并发的场景，建议可以选择</p>\n<h3 id=\"rabbitmq-2\"><a class=\"anchor\" href=\"#rabbitmq-2\">#</a> RabbitMQ</h3>\n<p>结合 erlang 语言本身的开发优势， 性能好时效性微妙级，社区活跃度，管理界面方便，数据量没那么大，中小型公司</p>\n<h1 id=\"rabbitmq-3\"><a class=\"anchor\" href=\"#rabbitmq-3\">#</a> RabbitMQ</h1>\n<h2 id=\"rabbit概念\"><a class=\"anchor\" href=\"#rabbit概念\">#</a> Rabbit 概念</h2>\n<p>RabbitMQ 是一个消息中间件；它接受并转发消息，接受、存储和转发消息</p>\n<h2 id=\"rabbit核心概念\"><a class=\"anchor\" href=\"#rabbit核心概念\">#</a> Rabbit 核心概念</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/image-20220627161810815.png\" alt=\"image-20220627161810815\" /></p>\n<h3 id=\"1-生产者\"><a class=\"anchor\" href=\"#1-生产者\">#</a> 1. 生产者</h3>\n<blockquote>\n<p>产生数据发送消息的生产者</p>\n</blockquote>\n<h3 id=\"2-交换机\"><a class=\"anchor\" href=\"#2-交换机\">#</a> 2. 交换机</h3>\n<blockquote>\n<p>交换机是 RabbitMQ 非常重要的一个部件，一方面它接受来自生产者的消息，另一方面它将消息推送到队列中，交换机必须确切知道如何处理它接受到的消息，是将这些消息推送到特定的队列还是推送到多个队列，亦或者是把消息丢弃，这个得有交换机类型决定</p>\n</blockquote>\n<h3 id=\"3-队列\"><a class=\"anchor\" href=\"#3-队列\">#</a> 3. 队列</h3>\n<blockquote>\n<p>队列是 RabbitMQ 内部使用的一个数据结构，尽管消息流经 RabbitMQ 和应用程序，但它们只能存储在队列中。队列仅受主机的内存和磁盘限制的约束，本质上是一个大的消息缓冲区，许多生产者可以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据，这就是我们使用队列的方式</p>\n<p>交换机和队列可以一对多绑定</p>\n</blockquote>\n<h3 id=\"4-消费者\"><a class=\"anchor\" href=\"#4-消费者\">#</a> 4. 消费者</h3>\n<blockquote>\n<p>消费与接收具有相似的含义。消费者大多时候是一个等待接受消息的程序。请注意生产者，消费者和消息中间件很多时候并不在同意机器上。同一个应用程序既可以是生产者又可以是消费者</p>\n</blockquote>\n<h2 id=\"rabbit核心部分模式\"><a class=\"anchor\" href=\"#rabbit核心部分模式\">#</a> Rabbit 核心部分（模式）</h2>\n<ul>\n<li>\n<p>&quot;Holle World&quot; 简单模式</p>\n</li>\n<li>\n<p>Work queues 工作模式</p>\n</li>\n<li>\n<p>Publish/Subscribe 发布 / 订阅模式</p>\n</li>\n<li>\n<p>Routing 路由模式</p>\n</li>\n<li>\n<p>Topics 主题模式</p>\n</li>\n<li>\n<p>Publisher Confirms 发布确认模式</p>\n</li>\n</ul>\n<h2 id=\"各个名词解释\"><a class=\"anchor\" href=\"#各个名词解释\">#</a> 各个名词解释</h2>\n<h3 id=\"rabbit工作原理\"><a class=\"anchor\" href=\"#rabbit工作原理\">#</a> Rabbit 工作原理</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/image-20220627162630662.png\" alt=\"image-20220627162630662\" /></p>\n<p><mark>Broke</mark>: 接收和分发消息的应用，RabbitMQ Server 就是 Message Broker，实质</p>\n<p><mark>Virtual host</mark>：出于多租户和安全因素设计的，把 AMQP 的基本组件划分到一个虚拟的分组中，类似于网络中的 namespace 概念。当多个不同的用户使用同一个 RabbitMQ server 提供的服务时，可以划分出 多个 vhost，每个用户在自己的 vhost 创建 exchange／queue 等</p>\n<p><strong><mark>Connection</mark></strong>：publisher／consumer 和 broker 之间的 TCP 连接</p>\n<p><strong><mark>Channel</mark></strong>：如果每一次访问 RabbitMQ 都建立一个 Connection，在消息量大的时候建立 TCP Connection 的开销将是巨大的，效率也较低。Channel 是在 connection 内部建立的逻辑连接，如果应用程 序支持多线程，通常每个 thread 创建单独的 channel 进行通讯，AMQP method 包含了 channel id 帮助客 户端和 message broker 识别 channel，所以 channel 之间是完全隔离的。Channel 作为轻量级的 Connection 极大减少了操作系统建立 TCP connection 的开销</p>\n<p><mark>Exchange</mark>：message 到达 broker 的第一站，根据分发规则，匹配查询表中的 routing key，分发 消息到 queue 中去。常用的类型有：direct (point-to-point), topic (publish-subscribe) and fanout (multicast)</p>\n<p><mark>Queue</mark>：消息最终被送到这里等待 consumer 取走</p>\n<p><mark>Binding</mark>：exchange 和 queue 之间的虚拟连接，binding 中可以包含 routing key，Binding 信息被保 存到 exchange 中的查询表中，用于 message 的分发依据</p>\n",
            "tags": [
                "学习笔记",
                "后端",
                "消息队列"
            ]
        },
        {
            "id": "https://windlinxy.top/2022/04/23/f0d92c452e76/",
            "url": "https://windlinxy.top/2022/04/23/f0d92c452e76/",
            "title": "开启音乐创作之旅",
            "date_published": "2022-04-23T02:46:33.000Z",
            "content_html": "<h1 id=\"开启音乐创作之旅\"><a class=\"anchor\" href=\"#开启音乐创作之旅\">#</a> 开启音乐创作之旅</h1>\n<p>这是一个零基础的电子音乐教学网，你可以学习到基本的乐理知识，并且网站提供在线编曲，你可以通过点击按钮来获得自己想要的韵律。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybmluZ211c2ljLmFibGV0b24uY29tL3poLUhhbnMvaW5kZXguaHRtbA==\">Learning Music</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/image-20220423104902495.png\" alt=\"image-20220423104902495\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/image-20220423105408450.png\" alt=\"image-20220423105408450\" /></p>\n<p><strong>节奏</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/image-20220423105451762.png\" alt=\"image-20220423105451762\" /></p>\n<p><strong>贝斯</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/image-20220423105514105.png\" alt=\"image-20220423105514105\" /></p>\n<p>还有<strong>和弦</strong>和旋律</p>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/image-20220423105602469.png\" alt=\"image-20220423105602469\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/Windlinxy/Typora-img/main/img/image-20220423105612442.png\" alt=\"image-20220423105612442\" /></p>\n<p><strong>使用此网站随便作的曲子：</strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tdXNpYy4xNjMuY29tLyMvc29uZz9pZD0xODYxNjUyMTQ1\">AnxiousLeisure</span></p>\n",
            "tags": [
                "杂谈",
                "兴趣",
                "网站推荐"
            ]
        },
        {
            "id": "https://windlinxy.top/2022/04/20/be5fe109faf5/",
            "url": "https://windlinxy.top/2022/04/20/be5fe109faf5/",
            "title": "函数式接口与方法引用",
            "date_published": "2022-04-20T00:48:07.000Z",
            "content_html": "<h1 id=\"函数式接口\"><a class=\"anchor\" href=\"#函数式接口\">#</a> 函数式接口</h1>\n<h2 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h2>\n<ul>\n<li>\n<p><strong>只有一个抽象方法</strong>的接口称之为函数式接口（<strong>SAM</strong> Single Abstract Method 单一抽象方法模型）</p>\n</li>\n<li>\n<p>JDK 的函数式接口都加上了 @FunctionalInterface 注解进行标识。</p>\n</li>\n<li>\n<p>但是无论是否加上该注解，只要接口中只有一个抽象方法，都是函数式接口</p>\n</li>\n<li>\n<p>函数式接口可以通过 Lambda 表达式进行转换</p>\n</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InterfaceEx</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 单一抽象方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"常用函数式接口\"><a class=\"anchor\" href=\"#常用函数式接口\">#</a> 常用函数式接口</h2>\n<h3 id=\"consumer消费接口\"><a class=\"anchor\" href=\"#consumer消费接口\">#</a> Consumer 消费接口</h3>\n<p><strong>对传入的值进行消费</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * Performs this operation on the given argument.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param t the input argument</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">andThen</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> after<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>after<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> after<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"function计算转换接口\"><a class=\"anchor\" href=\"#function计算转换接口\">#</a> Function 计算转换接口</h3>\n<p><strong>在方法中对传入的参数计算或转换，将结果返回</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * Applies this function to the given argument.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @param t the function argument</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @return the function result</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">R</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"常用默认方法\"><a class=\"anchor\" href=\"#常用默认方法\">#</a> 常用默认方法</h2>\n<ul>\n<li>and</li>\n<li>or</li>\n<li>ntgate</li>\n</ul>\n<h1 id=\"方法引用\"><a class=\"anchor\" href=\"#方法引用\">#</a> 方法引用</h1>\n<p>使用 Lambda 时，如果方法体中只有一个方法的调用的话，我们可以用方法引用进一步简化代码</p>\n<h2 id=\"推荐用法\"><a class=\"anchor\" href=\"#推荐用法\">#</a> 推荐用法</h2>\n<p>我们在使用 lambda 时不需要考虑什么时候用方法引用，用哪种方法引用，方法引用的格式是什么。我们只需要在写完 lambda 方法发现方法体只有一行代码，并且是方法的调用时使用快捷键尝试是否能够转换成方法引用即可。<br />\n当我们方法引用使用的多了慢慢的也可以直接写出方法引用。</p>\n<h2 id=\"基本格式\"><a class=\"anchor\" href=\"#基本格式\">#</a> 基本格式</h2>\n<p><code>ClassName::Method</code></p>\n<h2 id=\"语法详解\"><a class=\"anchor\" href=\"#语法详解\">#</a> 语法详解</h2>\n<h3 id=\"引用静态方法\"><a class=\"anchor\" href=\"#引用静态方法\">#</a> 引用静态方法</h3>\n<p>格式： <code>类名::方法名</code></p>\n<p>使用条件：</p>\n<ul>\n<li>重写方法时，方法体只有一行代码</li>\n<li>这行代码调用了某个类的静态方法</li>\n<li>要重写的抽象方法中所有的参数都按照顺序传入了这个静态方法</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> books <span class=\"token operator\">=</span> author<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Author</span><span class=\"token operator\">::</span><span class=\"token function\">getBooks</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"引用对象实例方法\"><a class=\"anchor\" href=\"#引用对象实例方法\">#</a> 引用对象实例方法</h3>\n<p>格式： <code>对象名::方法名</code></p>\n<p>使用条件：</p>\n<ul>\n<li>重写方法时，方法体中只有一行代码</li>\n<li>这行代码是调用了某个对象的成员方法</li>\n<li>要重写的抽象方法中所有的参数都按照顺序传入了这个成员方法中</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        author<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Author</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">-></span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><pre><code>StringBuilder stringBuilder = new StringBuilder();\n author.stream().map(Author::getName)\n         .forEach(stringBuilder::append);\n</code></pre>\n<h3 id=\"引用类的实例方法\"><a class=\"anchor\" href=\"#引用类的实例方法\">#</a> 引用类的实例方法</h3>\n<p>格式： <code>类名::方法名</code></p>\n<p>使用条件：</p>\n<ul>\n<li>重写方法时，方法体只有一行代码</li>\n<li>这行代码调用了第一个参数的成员方法</li>\n<li>要重写的抽象方法中剩余所有的参数都按照顺序传入了这个成员方法</li>\n</ul>\n<h3 id=\"构造器引用\"><a class=\"anchor\" href=\"#构造器引用\">#</a> 构造器引用</h3>\n<p>格式： <code>类名::new</code></p>\n<p>使用条件：</p>\n<ul>\n<li>重写方法时，方法体只有一行代码</li>\n<li>方法调用了某个类的构造方法</li>\n<li>要重写的抽象方法中所有的参数都按照顺序传入了这个构造方法</li>\n</ul>\n<h3 id=\"基本类型优化\"><a class=\"anchor\" href=\"#基本类型优化\">#</a> 基本类型优化</h3>\n<p>对于流的 map () 可以使用 mapToInt 等等以及 flatMapToInt () 去处理基本类型相关可以减少装箱拆箱带来的时间成本。</p>\n<h1 id=\"并行流\"><a class=\"anchor\" href=\"#并行流\">#</a> 并行流</h1>\n<p>当流中有大量元素时，我们可以使用并行流来提高操作效率。其实并行流就是把任务分配给多个线程去完成，如果我们自己去用代码实现会非常复杂，并且要求对并发编程有足够理解、</p>\n<p>parallel 方法可以把串行流转换成并行流。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">my</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token class-name\">Integer</span> sum <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>               <span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">+</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">-></span> num<span class=\"token operator\">></span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>               <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                       <span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>也可以通过 parallelStream 直接获取并行流对象</p>\n",
            "tags": [
                "学习笔记",
                "Java",
                "JDK8",
                "函数式编程"
            ]
        }
    ]
}